{"version":3,"sources":["CustomCard.js","Square.js","Board.js","index.js"],"names":["MyCard","props","holder","i","messages","length","push","Card","Title","key","header","Text","className","Header","Button","id","onClick","clearMessages","bind","Body","Square","state","hover","weight","onMouseEnterSquare","onMouseLeaveSquare","this","setState","nextProps","nextState","nextContext","stateId","variant","onMouseEnter","onMouseLeave","React","Component","Board","testingUrl","useState","cardMessages","setCardMessages","backendOrFrontEnd","setBackEndOrFrontEnd","Array","height","width","fill","blockedNodes","setBlockedNodes","squares","setSquares","weights","setWeights","startMarkerIndex","setStartMarkerIndex","dropDownMenu","setDropDownMenu","endMarkerIndex","setEndMarkerIndex","barrier","setBarrier","addToast","useToasts","weightButton","setWeightButton","updateMessages","data","sender","unshift","slice","dialogToOutput","date1","date2","Date","time","Math","abs","backendDijkstra","a","valid","checkForValidMarkers","messageSeparator","axios","post","SIZE","WIDTH","then","res","placement","appearance","autoDismiss","animateWithReturnPath","catch","err","console","error","backendDepthFirstSearch","animateWithoutReturnPath","backendBreathFirstSearch","HEIGHT","log","arr","timerID2","tickIndex","clearSquares","reDrawBarrier","tick2","tickArr","clearInterval","setInterval","findPathArr","shortestPathArr","finishedAnimatingFindPath","renderSquare","count","index","fork","setWeight","SetMarker","toastMessage","startStateMarker","endStateMarker","undefined","createBarrier","setWeightButtonFunction","document","getElementById","innerText","parent","children","j","menuClass","role","type","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","Game","autoDismissTimeout","ReactDOM","render"],"mappings":"ySAuBeA,EAnBA,SAACC,GAGZ,IADA,IAAMC,EAAS,GACPC,EAAI,EAAGA,EAAIF,EAAMG,SAASC,OAAQF,IAEtCD,EAAOI,KAAM,kBAACC,EAAA,EAAKC,MAAN,CAAYC,IAAO,QAAUN,GAAKF,EAAMS,OAAOP,KAC5DD,EAAOI,KAAO,kBAACC,EAAA,EAAKI,KAAN,CAAWF,IAAO,UAAYN,GAAIF,EAAMG,SAASD,KAEnE,OACA,kBAACI,EAAA,EAAD,CAAMK,UAAU,eACZ,kBAACL,EAAA,EAAKM,OAAN,KACI,kBAACC,EAAA,EAAD,CAAQC,GAAI,eAAgBC,QAAWf,EAAMgB,cAAcC,U,IAA3D,kBADJ,8BAIA,kBAACX,EAAA,EAAKY,KAAN,KACKjB,K,gBCwCEkB,E,kDAxDX,WAAYnB,GAAQ,IAAD,8BACf,cAAMA,IACDoB,MAAQ,CACTC,OAAO,EACPP,GAAI,GACJQ,OAAQ,GAEZ,EAAKC,mBAAqB,EAAKA,mBAAmBN,KAAxB,gBAC1B,EAAKO,mBAAqB,EAAKA,mBAAmBP,KAAxB,gBAC1B,EAAKF,QAAU,EAAKA,QAAQE,KAAb,gBATA,E,iEAafQ,KAAKC,SAAS,CACVZ,GAAI,gBACJO,OAAO,M,2CAKXI,KAAKC,SAAS,CACVZ,GAAI,iBACJO,OAAO,M,gCAIXI,KAAKzB,MAAMe,Y,4CAIOY,EAAWC,EAAWC,GAExC,OAAGD,EAAUd,KAAOW,KAAKL,MAAMN,IAAMW,KAAKzB,MAAMsB,SAAWK,EAAUL,QAAUG,KAAKzB,MAAMc,KAAOa,EAAUb,K,+BAK3G,IAAIgB,EAKJ,OADIA,EAHAL,KAAKL,MAAMC,MAGDI,KAAKL,MAAMN,GAFXW,KAAKzB,MAAMc,GAIrB,kBAACD,EAAA,EAAD,CACIkB,QAAQ,YACRpB,UAAU,SACVG,GAAIgB,EACJE,aAAcP,KAAKF,mBAAmBN,OACtCgB,aAAcR,KAAKD,mBAAmBP,OACtCF,QAASU,KAAKV,QAAQE,QACrBQ,KAAKzB,MAAMsB,Y,GAnDPY,IAAMC,W,iBCoZZC,EA9YD,SAACpC,GA0VX,IAzVA,IACMqC,EAAa,yBAFE,EAIiBC,mBAAS,CAAC,8FACQ,iEACA,kDACI,oDACI,0DACI,gHAT/C,mBAIhBC,EAJgB,KAIFC,EAJE,OAW2BF,mBAAS,IAXpC,mBAWhBG,EAXgB,KAWGC,EAXH,OAYmBJ,mBAASK,MAAM3C,EAAM4C,OAAS5C,EAAM6C,OAAOC,MAAK,IAZnE,mBAYdC,EAZc,KAYAC,EAZA,OAaOV,mBAASK,MAAM3C,EAAM4C,OAAS5C,EAAM6C,OAAOC,MAAK,IAbvD,mBAahBG,EAbgB,KAaPC,EAbO,OAcOZ,mBAASK,MAAM3C,EAAM4C,OAAS5C,EAAM6C,OAAOC,KAAK,IAdvD,mBAchBK,EAdgB,KAcPC,EAdO,OAe2Bd,oBAAU,GAfrC,mBAede,EAfc,KAeIC,EAfJ,OAgBmBhB,oBAAS,GAhB5B,mBAgBdiB,EAhBc,KAgBAC,EAhBA,OAiBuBlB,oBAAU,GAjBjC,mBAiBdmB,EAjBc,KAiBEC,EAjBF,OAkBSpB,oBAAS,GAlBlB,mBAkBdqB,EAlBc,KAkBLC,EAlBK,KAmBdC,EAAYC,sBAAZD,SAnBc,EAoBmBvB,oBAAS,GApB5B,mBAoBdyB,EApBc,KAoBAC,EApBA,KAsBfC,EAAiB,SAACC,EAAMC,GAE1B5B,EAAa6B,QAAQF,GACrBzB,EAAkB2B,QAAQD,GAC1B3B,EAAgBD,EAAa8B,SAC7B3B,EAAqBD,EAAkB4B,UAGrCC,GAAiB,SAACC,EAAOL,GAE3B,IAAMM,EAAQ,IAAIC,KACZC,EAAOC,KAAKC,IAAIJ,EAAMD,GAAO,IACnCN,EAAeC,EAAM,WACrBD,EAAe,0BAA6BS,EAAO,WAAY,aAE/DG,GAAe,uCAAG,8BAAAC,EAAA,yDAEZP,EAAQ,IAAIE,KAEL,QADPM,EAAQC,MAHI,yCAMPD,GANO,cAQlBE,KACAhB,EAAe,4BAA6B,YAT1B,SAUZiB,IAAMC,KAAK9C,EAAa,WAAY,CAACgB,mBAAkBI,iBAAgB2B,QAAMC,SAAOtC,eAAcI,YACnGmC,MAAK,SAAAC,GAEF,GADAjB,GAAeC,EAAOgB,EAAIrB,KAAK,KACX,KAAhBqB,EAAIrB,KAAK,GAIT,OACIL,EAAS,sBAAuB,CAC5B2B,UAAW,aACXC,WAAY,UACZC,aAAa,IAPrBC,GAAsBJ,EAAIrB,KAAK,OAUtC0B,OAAM,SAAAC,GAAQC,QAAQC,MAAMF,MAxBf,2CAAH,qDA8BbG,GAAuB,uCAAG,8BAAAlB,EAAA,yDAEtBP,EAAQ,IAAIE,KAEN,QADNM,EAAOC,MAHe,yCAKjBD,GALiB,cAO5BE,KACAhB,EAAe,uBAAwB,YARX,SAStBiB,IAAMC,KAAK9C,EAAa,mBAAoB,CAACgB,mBAAkBI,iBAAgB2B,QAAMC,SAAOtC,iBAC7FuC,MAAK,SAAAC,GACFjB,GAAeC,EAAOgB,EAAIrB,KAAK,IAC/B+B,GAAyBV,EAAIrB,KAAK,OAErC0B,OAAM,SAAAC,GAAQC,QAAQC,MAAMF,MAdL,2CAAH,qDAgBvBZ,GAAmB,WAErBhB,EAAe,IAAK,iCAEpBiC,GAAwB,uCAAG,8BAAApB,EAAA,yDACvBP,EAAQ,IAAIE,KAEJ,QADNM,EAAOC,MAFc,yCAKhBD,GALgB,cAQ3BE,KACAhB,EAAe,uBAAwB,YATZ,SAUrBiB,IAAMC,KAAK9C,EAAa,oBAAqB,CAACgB,mBAAkBI,iBAAgB2B,QAAMC,SAAOc,UAAQlD,UAASF,eAAcI,YAC7HmC,MAAK,SAAAC,GAGF,GAFAO,QAAQM,IAAI,eACZ9B,GAAeC,EAAOgB,EAAIrB,KAAK,KACX,KAAhBqB,EAAIrB,KAAK,GAIT,OACIL,EAAS,sBAAuB,CAC5B2B,UAAW,aACXC,WAAY,UACZC,aAAa,IAPrBC,GAAsBJ,EAAIrB,KAAK,OAUtC0B,OAAM,SAAAC,GAAQC,QAAQC,MAAMF,MAzBN,2CAAH,qDA4BxBI,GAA2B,SAACI,GAE5B,IACIC,EADAC,EAAY,EAEhBC,KACAC,KACA,IAIMC,EAAQ,SAACC,GACX,KAAIJ,EAAYI,EAAQvG,OAAS,GAO7B,OAXJwG,cAAcN,IAWyB,IAAhCK,EAAQA,EAAQvG,OAAS,GAEpByD,EAAS,sBAAuB,CAC5B4B,WAAY,UACZC,aAAa,KAGzBzC,EAAQ0D,EAAQA,EAAQvG,OAAS,IAAM,OACvC8C,EAAWD,EAAQoB,SAEfR,EAAS,kBAAmB,CACxB2B,UAAW,aACXC,WAAY,UACZC,aAAa,KAlBrBzC,EAAQ0D,EAAQJ,IAAc,QAC9BA,IACArD,EAAWD,EAAQoB,UAoB3BiC,EAAWO,aACP,kBAAMH,EAAML,KACZ,KAIJV,GAAwB,SAACU,GACzB,IAGIC,EAHEQ,EAAcT,EAAI,GAClBU,EAAkBV,EAAI,GACxBE,EAAY,EAEhBC,KACAC,KACA,IAGIO,GAA4B,EAC1BN,EAAQ,SAACI,EAAaC,GACpBC,EAgBGT,EAAYQ,EAAgB3G,OAAS,GAEpC6C,EAAQ8D,EAAgBR,IAAc,OACtCrD,EAAWD,EAAQoB,SACnBkC,MAGAtD,EAAQ8D,EAAgBA,EAAgB3G,OAAS,IAAM,OACvD8C,EAAWD,EAAQoB,SA5B3BuC,cAAcN,IAKNC,EAAYO,EAAY1G,QAEnB0G,EAAYP,KAAe9C,GAAqBqD,EAAYP,KAAelD,IAC5EJ,EAAQ6D,EAAYP,IAAc,SACtCA,IACArD,EAAWD,EAAQoB,WAEnB2C,GAA4B,EAC5B/D,EAAQQ,GAAkB,OAC1BP,EAAWD,EAAQoB,SACnBkC,EAAY,IAkBxBD,EAAWO,aACP,kBAAMH,EAAMI,EAAaC,KACzB,KASF/B,GAAuB,WACzB,OAAI3B,EAAmB,GAAKI,EAAiB,EAErCI,EAAS,qDAAsD,CAC3D4B,WAAY,UACZC,aAAa,IAEX,MAGduB,GAAe,SAACC,GAChB,IAAI9F,EAAQ,YAOZ,MANuB,SAAnB6B,EAAQiE,IAAwC,UAAnBjE,EAAQiE,IAAyC,UAAnBjE,EAAQiE,GACnE9F,EAAQ6B,EAAQiE,GACXA,IAAU7D,EACfjC,EAAQ,cACH8F,IAAUzD,IACfrC,EAAQ,aACJ,kBAAC,EAAD,CAAQN,GAAIM,EAAO+F,MAAOD,EAAO5F,OAAU6B,EAAQ+D,GAAQnG,QAASqG,GAAKnG,U,EAAWiG,GAAQ1G,IAAK0G,KAEzGE,GAAO,SAAClH,GACL6D,EA1BW,SAACmD,GACf/D,EAAQ+D,GAAS/D,EAAQ+D,GAAO,EAChC9D,EAAWD,EAAQkB,SAyBfgD,CAAUnH,GAEVoH,GAAUpH,IAEdoH,GAAY,SAACpH,GACb,IAAIqH,EAAe,GACflB,EAAMpD,EAAQoB,QACdmD,EAAmBnE,EACnBoE,EAAiBhE,EACrB,GAAIE,EAKA,OAJAZ,EAAa7C,IAAK,EAClB8C,EAAgBD,EAAasB,SAC7BpB,EAAQ/C,GAAK,aACbgD,EAAWD,EAAQoB,SAEhB,GAAImD,IAAqBtH,EAC5BsH,GAAoB,EACpBnB,EAAInG,QAAKwH,EACTH,EAAe,iCACZ,GAAIC,EAAmB,GAAKC,IAAmBvH,EAClDuH,GAAkB,EAElBF,EAAe,+BACZ,GAAIC,EAAmB,EAC1BA,EAAmBtH,EAEnBqH,EAAe,+BACZ,GAAIE,IAAmBvH,EAC1BuH,GAAkB,EAElBF,EAAe,8BACZ,MAAIE,EAAiB,GAKxB,OAJAA,EAAiBvH,EAEjBqH,EAAe,wBAOnB,OAHAjE,EAAoBkE,GACpB9D,EAAkB+D,GAClBvE,EAAWD,GAEPY,EAAS0D,EAAc,CACnB9B,WAAY,OACZC,aAAa,KAInBc,GAAe,WAEjBvD,EAAUN,MAAM3C,EAAM4C,OAAS5C,EAAM6C,OAAOC,KAAK,MACjDI,EAAWP,MAAM3C,EAAM4C,OAAS5C,EAAM6C,OAAOC,KAAK,QAGhD2D,GAAgB,WAClB,IAAI,IAAIvG,EAAI,EAAGA,EAAI+C,EAAQ7C,OAAQF,KAER,IAApB6C,EAAa7C,KAEZ+C,EAAQ/C,GAAK,SAGrBgD,EAAWP,MAAMM,EAAQoB,WAkBvBsD,GAAgB,WAClB/D,GAAYD,GACTI,GAEC6D,KAGAC,SAASC,eAAe,WAAWC,UADnCpE,EAC+C,eAEA,mBAGjDiE,GAA0B,WAE5B5D,GAAiBD,GACdJ,GAECgE,KAGAE,SAASC,eAAe,cAAcC,UADvChE,EACmD,cAEA,sBAStDiE,GAAS,GACTd,GAAQ,EACNf,GAASnG,EAAM4C,OACfyC,GAAQrF,EAAM6C,MACduC,GAAOe,GAASd,GACbnF,GAAI,EAAGA,GAAIiG,GAAQjG,KAAK,CAE7B,IADA,IAAI+H,GAAW,GACNC,GAAI,EAAGA,GAAI7C,GAAO6C,KACvBD,GAAS5H,KAAK4G,GAAaC,KAC3BA,KAEJc,GAAO3H,KAAK,yBAAKG,IAAKN,GAAGS,UAAW,aAAcsH,KAEtD,IACME,GAAS,wBAAqB5E,EAAc,QAAS,IAC3D,OACI,yBAAKzC,GAAI,OACL,yBAAKA,GAAI,WACD,yBAAKA,GAAK,WAAWH,UAAY,qBAAqByH,KAAM,SAC5D,yBAAKzH,UAAU,YAAYyH,KAAK,SAC5B,4BAAQtH,GAAG,gBAAgBuH,KAAK,SAAUtH,QAP3C,kBAAMyC,GAAiBD,IAO0CtC,U,GAAYN,UAAU,kCAC9E2H,cAAY,gBAAgBC,gBAAc,OAAOC,gBAAc,SADvE,cAIA,yBAAK7H,UAAWwH,GAAWM,kBAAgB,iBACvC,uBAAG3H,GAAI,aAAcH,UAAY,gCAAgCI,QAAYiF,GAAwB/E,U,IAArG,kCAEI,kDAEJ,uBAAGH,GAAI,aAAcH,UAAY,gCAAgCI,QAAYmF,GAAyBjF,U,IAAtG,sBAEI,+CAEJ,uBAAGH,GAAI,aAAcH,UAAY,gCAAgCI,QAAY8D,GAAgB5D,U,IAA7F,oBAKR,kBAACJ,EAAA,EAAD,CAAQF,UAAY,gCAAgCI,QA3EjD,WACfyF,KAVAxD,EAAgBL,MAAM3C,EAAM4C,OAAS5C,EAAM6C,OAAOC,MAAK,IAGvDQ,GAAqB,GACrBI,GAAmB,GAGnBN,EAAWT,MAAM3C,EAAM4C,OAAS5C,EAAM6C,OAAOC,KAAK,KA6EoC7B,U,IAA1E,eACA,kBAACJ,EAAA,EAAD,CAAQF,UAAY,gCAAiCG,GAAK,UAAUC,QAAY4G,GAAc1G,U,IAA9F,gBACA,kBAACJ,EAAA,EAAD,CAAQF,UAAY,gCAAgCG,GAAI,aAAaC,QAAY6G,GAAwB3G,U,IAAzG,iBAIZ,yBAAKH,GAAI,aACPkH,IAEE,yBAAKlH,GAAI,YACH,kBAAC,EAAD,CAAQE,cAtDI,WAEtBwB,EAAgB,IAChBE,EAAqB,KAmDgCzB,U,GAAYd,SAAYoC,EAAc9B,OAAUgC,OCtYvGiG,E,kDACF,WAAY1I,GACX,IAAD,8BACI,cAAMA,IACDoB,MAAQ,CACTwB,OAAS,GACTC,MAAQ,IAJhB,E,qDAQI,OAEI,yBAAK/B,GAAI,OAAOH,UAAU,QAEtB,yBAAKA,UAAU,cACX,kBAAC,gBAAD,CAAegI,mBAAoB,IAAMnD,UAAU,iBAC/C,kBAAC,EAAD,CAAO5C,OAAUnB,KAAKL,MAAMwB,OAAQC,MAASpB,KAAKL,MAAMyB,UAIhE,yBAAKlC,UAAU,mB,GApBZuB,IAAMC,WA4BzByG,IAASC,OACL,kBAAC,EAAD,MAGAhB,SAASC,eAAe,W","file":"static/js/main.e6ebfc56.chunk.js","sourcesContent":["import Card from \"react-bootstrap/Card\";\nimport Button from \"react-bootstrap/Button\";\nimport React from \"react\";\n\nconst MyCard = (props) =>\n{\n    const holder = [];\n    for(let i = 0; i < props.messages.length; i++)\n    {//values will not be sorted or changed in any way such that using the index for the key should be fine\n        holder.push( <Card.Title key = {\"Title\" + i} >{props.header[i]}</Card.Title>)\n        holder.push(  <Card.Text key = {\"Message\" + i}>{props.messages[i]}</Card.Text>)\n    }\n    return (\n    <Card className=\"text-center\">\n        <Card.Header>\n            <Button id={\"headerButton\"} onClick = {props.clearMessages.bind(this)}>Clear Messages</Button>\n            Messages Sent and Received\n        </Card.Header>\n        <Card.Body>\n            {holder}\n        </Card.Body>\n    </Card>)\n}\nexport default MyCard","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nclass Square extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            hover: false,\n            id: '',\n            weight: 0\n        }\n        this.onMouseEnterSquare = this.onMouseEnterSquare.bind(this)\n        this.onMouseLeaveSquare = this.onMouseLeaveSquare.bind(this)\n        this.onClick = this.onClick.bind(this)\n    }\n\n    onMouseEnterSquare() {\n        this.setState({\n            id: 'redBackground',\n            hover: true\n        })\n    }\n\n    onMouseLeaveSquare() {\n        this.setState({\n            id: 'blueBackground',\n            hover: false\n        })\n    }\n    onClick() {\n        this.props.onClick()\n        //this.setWeight()\n\n    }\n    shouldComponentUpdate(nextProps, nextState, nextContext)\n    {\n        if(nextState.id !== this.state.id || this.props.weight !== nextProps.weight || this.props.id !== nextProps.id)\n            return true\n        return false;\n    }\n    render() {\n        let stateId\n        if(!this.state.hover)\n            stateId = this.props.id\n        else\n            stateId = this.state.id\n        return (\n            <Button\n                variant=\"secondary\"\n                className=\"square\"\n                id={stateId}\n                onMouseEnter={this.onMouseEnterSquare.bind()}\n                onMouseLeave={this.onMouseLeaveSquare.bind()}\n                onClick={this.onClick.bind()}>\n                {this.props.weight}\n            </Button>\n        )\n    }\n}\n\nexport default Square\n\n","import React, {useState} from \"react\";\nimport MyCard from \"./CustomCard\"\nimport {useToasts} from \"react-toast-notifications\";\nimport Button from \"react-bootstrap/Button\";\nimport Square from \"./Square\"\nimport axios from \"axios\"\n\n\nconst Board = (props) => {\n    const url = \"https://visualizerbackend.herokuapp.com/\"\n    const testingUrl = \"http://localhost:9000/\"\n    //can likely optimize blockedNodes\n    let [cardMessages, setCardMessages] = useState([\"Note: If the server has been idle, the initial query may take up to 10 seconds to complete.\",\n                                                            \"Backend is hosted at: https://visualizerbackend.herokuapp.com/\",\n                                                            \"To use:  Click a square to set a start location\",\n                                                                \"Then click another square to select a destination\",\n                                                                    \"You may also set barriers to change the available paths\",\n                                                                        \"Additionally, for Dijkstra's SPF you can set the weight of each square \" +\n                                                                        \"changing the algorithm's chosen path\"])\n    let [backendOrFrontEnd, setBackEndOrFrontEnd] = useState([])\n    const [blockedNodes, setBlockedNodes] = useState(Array(props.height * props.width).fill(false))\n    let [squares, setSquares] = useState(Array(props.height * props.width).fill(false))\n    let [weights, setWeights] = useState(Array(props.height * props.width).fill(1))\n    const [startMarkerIndex, setStartMarkerIndex] = useState(-1)\n    const [dropDownMenu, setDropDownMenu] = useState(false)\n    const [endMarkerIndex, setEndMarkerIndex] = useState(-1)\n    const [barrier, setBarrier] = useState(false)\n    const {addToast} = useToasts()\n    const [weightButton, setWeightButton] = useState(false)\n\n    const updateMessages = (data, sender) =>\n    {\n        cardMessages.unshift(data)\n        backendOrFrontEnd.unshift(sender)\n        setCardMessages(cardMessages.slice())\n        setBackEndOrFrontEnd(backendOrFrontEnd.slice())\n\n    }\n    const dialogToOutput = (date1, data) =>\n    {\n        const date2 = new Date()\n        const time = Math.abs(date2-date1)/1000\n        updateMessages(data, 'Backend'  )\n        updateMessages('Query round trip time: ' +  time + \" seconds\", 'Frontend')\n    }\n    let backendDijkstra = async () =>\n    {\n        const date1 = new Date()\n        const valid = checkForValidMarkers()\n        if(valid !== null)\n        {\n            return valid\n        }\n        messageSeparator()\n        updateMessages('Sending data for Dijkstra', 'Frontend')\n        await axios.post(testingUrl + 'dijkstra', {startMarkerIndex, endMarkerIndex, SIZE, WIDTH, blockedNodes, weights })\n            .then(res=>{\n                dialogToOutput(date1, res.data[0])\n                if(!res.data[1] === false) {\n                    animateWithReturnPath(res.data[1])\n                }\n                else\n                    return (\n                        addToast(\"Path does not exist\", {\n                            placement: 'top-middle',\n                            appearance: 'warning',\n                            autoDismiss: true,\n                        }))\n            })\n            .catch(err => {console.error(err)})\n        //let dict = createContainer(SIZE, WIDTH, blockedNodes)\n        //const k = new Dijkstra(weights, dict, startMarkerIndex, endMarkerIndex, SIZE)\n        //let shortestPath = k.dijkstra()\n        //animateWithReturnPath(shortestPath)\n    }\n    const backendDepthFirstSearch = async () =>\n    {\n        const date1 = new Date()\n        const valid =checkForValidMarkers()\n        if(valid!== null) {\n            return valid\n        }\n        messageSeparator()\n        updateMessages('Sending data for DFS', 'Frontend')\n        await axios.post(testingUrl + 'depthFirstSearch', {startMarkerIndex, endMarkerIndex, SIZE, WIDTH, blockedNodes})\n            .then(res=>{\n                dialogToOutput(date1, res.data[0])\n                animateWithoutReturnPath(res.data[1])\n            })\n            .catch(err => {console.error(err)})\n    }\n    const messageSeparator = () =>\n    {\n        updateMessages(\" \", \" *************************  \")\n    }\n    let backendBreathFirstSearch = async () => {\n        let date1 = new Date()\n        const valid =checkForValidMarkers()\n        if(valid!== null)\n        {\n            return valid\n        }\n\n        messageSeparator()\n        updateMessages('Sending data for BFS', 'Frontend')\n        await axios.post(testingUrl + 'breathFirstSearch', {startMarkerIndex, endMarkerIndex, SIZE, WIDTH, HEIGHT, squares, blockedNodes, weights })\n            .then(res=>{\n                console.log(\"await.axios\")\n                dialogToOutput(date1, res.data[0])\n                if(!res.data[1] === false) {\n                    animateWithReturnPath(res.data[1])\n                }\n                else\n                    return (\n                        addToast(\"Path does not exist\", {\n                            placement: 'top-middle',\n                            appearance: 'warning',\n                            autoDismiss: true,\n                        }))\n            })\n            .catch(err => {console.error(err)})\n    }\n\n    let animateWithoutReturnPath = (arr) => {\n\n        let tickIndex = 1\n        let timerID2\n        clearSquares()\n        reDrawBarrier()\n        const clearTickInterval = () => {\n            clearInterval(timerID2)\n        }\n\n        const tick2 = (tickArr) => {\n            if (tickIndex < tickArr.length - 1) {\n                //mutating the array directly :/\n                squares[tickArr[tickIndex]] = 'green'\n                tickIndex++\n                setSquares(squares.slice())\n            } else {\n                clearTickInterval(timerID2)\n                if(tickArr[tickArr.length - 1] === false) {\n                    return (\n                        addToast(\"Path does not exist\", {\n                            appearance: 'warning',\n                            autoDismiss: true,\n                        }))\n                }\n                squares[tickArr[tickArr.length - 1]] = 'gold'\n                setSquares(squares.slice())\n                return (\n                    addToast(\"Path does exist\", {\n                        placement: 'top-middle',\n                        appearance: 'success',\n                        autoDismiss: true,\n                    }))\n            }\n        }\n        timerID2 = setInterval(\n            () => tick2(arr),\n            10\n        )\n    }\n\n    let animateWithReturnPath = (arr) => {\n        const findPathArr = arr[0]\n        const shortestPathArr = arr[1]\n        let tickIndex = 0\n        let timerID2\n        clearSquares()\n        reDrawBarrier()\n        const clearTickInterval = () => {\n            clearInterval(timerID2)\n        }\n        let finishedAnimatingFindPath = false\n        const tick2 = (findPathArr, shortestPathArr) => {\n            if(!finishedAnimatingFindPath) {\n                if (tickIndex < findPathArr.length) {\n                    //mutating the array directly -- doesn't seem to update promptly otherwise\n                    if(!(findPathArr[tickIndex] === endMarkerIndex) && !(findPathArr[tickIndex] === startMarkerIndex))\n                        squares[findPathArr[tickIndex]] = 'green'\n                    tickIndex++\n                    setSquares(squares.slice())\n                } else {\n                    finishedAnimatingFindPath = true\n                    squares[endMarkerIndex] = 'gold'\n                    setSquares(squares.slice())\n                    tickIndex = 0\n                }\n            }\n            else\n            {\n                if(tickIndex < shortestPathArr.length - 1)\n                {\n                    squares[shortestPathArr[tickIndex]] = 'gold'\n                    setSquares(squares.slice())\n                    tickIndex++\n                }\n                else{\n                    squares[shortestPathArr[shortestPathArr.length - 1]] = 'gold'\n                    setSquares(squares.slice())\n                    clearTickInterval(timerID2)\n                }\n            }\n        }\n        timerID2 = setInterval(\n            () => tick2(findPathArr, shortestPathArr),\n            10\n        )\n    }\n\n    const setWeight = (count) => {\n        weights[count] = weights[count]+1\n        setWeights(weights.slice())\n    }\n\n    const checkForValidMarkers = () => {\n        if (startMarkerIndex < 0 && endMarkerIndex < 0) {\n            return (\n                addToast(\"Please select a starting and ending location first\", {\n                    appearance: 'warning',\n                    autoDismiss: true,\n                }))\n        } else return null\n    }\n\n    let renderSquare = (count) => {\n        let state = 'slateGrey'\n        if (squares[count] === 'gold' || squares[count] === 'green' || squares[count] === 'black')\n            state = squares[count]\n        else if (count === startMarkerIndex)\n            state = 'startMarker'\n        else if (count === endMarkerIndex)\n            state = 'endMarker'\n        return (<Square id={state} index={count} weight = {weights[count]} onClick={fork.bind(this, count)} key={count}/>)\n    }\n    let fork = (i) => {\n        if(weightButton)\n            setWeight(i)\n        else\n            SetMarker(i)\n    }\n    let SetMarker = (i) => {\n        let toastMessage = \"\"\n        let arr = squares.slice()\n        let startStateMarker = startMarkerIndex;\n        let endStateMarker = endMarkerIndex;\n        if (barrier) {\n            blockedNodes[i] = true\n            setBlockedNodes(blockedNodes.slice())\n            squares[i] = 'black'\n            setSquares(squares.slice())\n            return\n        } else if (startStateMarker === i) {\n            startStateMarker = -1\n            arr[i] = undefined\n            toastMessage = \"Deselected Start Location\"\n        } else if (startStateMarker < 0 && endStateMarker === i) {\n            endStateMarker = -1\n            //arr[i] = undefined\n            toastMessage = \"Deselected End Location\"\n        } else if (startStateMarker < 0) {\n            startStateMarker = i\n            //arr[i] = 'O'\n            toastMessage = \"Start Location Selected\"\n        } else if (endStateMarker === i) {\n            endStateMarker = -1\n            //arr[i] = undefined\n            toastMessage = \"Deselected End Location\"\n        } else if (endStateMarker < 0) {\n            endStateMarker = i\n            //arr[i] = 'X'\n            toastMessage = \"Selected End Location\"\n        } else {\n            return\n        }\n        setStartMarkerIndex(startStateMarker)\n        setEndMarkerIndex(endStateMarker)\n        setSquares(squares)\n        return (\n            addToast(toastMessage, {\n                appearance: 'info',\n                autoDismiss: true,\n            }))\n    }\n\n    const clearSquares = () => {\n        //squares not changing without setting squares explicitly\n        squares = Array(props.height * props.width).fill(null)\n        setSquares(Array(props.height * props.width).fill(null))\n\n    }\n    const reDrawBarrier = () =>{\n        for(let i = 0; i < squares.length; i++)\n        {\n            if(blockedNodes[i] === true)\n            {\n                squares[i] = 'black'\n            }\n        }\n        setSquares(Array(squares.slice()))\n    }\n    const clearBarrier = () => {\n        setBlockedNodes(Array(props.height * props.width).fill(false))\n    }\n    const clearMarkers = () => {\n        setStartMarkerIndex(-1)\n        setEndMarkerIndex(-1)\n    }\n    const clearWeights = () => {\n        setWeights(Array(props.height * props.width).fill(1))\n    }\n    const clearGraph = () => {\n        clearSquares()\n        clearBarrier()\n        clearMarkers()\n        clearWeights()\n    }\n    const createBarrier = () => {\n        setBarrier(!barrier)\n        if(weightButton)\n        {\n            setWeightButtonFunction()\n        }\n        if (barrier)\n            document.getElementById(\"barrier\").innerText = \"Draw Barrier\"\n        else\n            document.getElementById(\"barrier\").innerText = \"Disable Barrier\"\n    }\n\n    const setWeightButtonFunction = () =>\n    {\n        setWeightButton(!weightButton)\n        if(barrier)\n        {\n            createBarrier()\n        }\n        if(weightButton)\n            document.getElementById(\"addWeights\").innerText = \"Set Weights\"\n        else\n            document.getElementById(\"addWeights\").innerText = \"Toggle Weights Off\"\n\n    }\n    const clearCardMessages = () =>\n    {\n        setCardMessages([])\n        setBackEndOrFrontEnd([])\n    }\n\n    let parent = []\n    let count = 0\n    const HEIGHT = props.height\n    const WIDTH = props.width\n    const SIZE = HEIGHT * WIDTH\n    for (let i = 0; i < HEIGHT; i++) {\n        let children = []\n        for (let j = 0; j < WIDTH; j++) {\n            children.push(renderSquare(count))\n            count++\n        }\n        parent.push(<div key={i} className={\"board-row\"}>{children}</div>)\n    }\n    const toggleOpen = () => setDropDownMenu(!dropDownMenu)\n    const menuClass = `dropdown-menu ${ dropDownMenu? \" show\": \"\"}`\n    return (\n        <div id={\"box\"}>\n            <div id={\"leftBox\"}>\n                    <div id = \"buttons1\" className = \"btn-group-vertical\" role={\"group\"}>\n                    <div className=\"btn-group\" role=\"group\">\n                        <button id=\"btnGroupDrop1\" type=\"button\"  onClick = {toggleOpen.bind(this)} className=\"btn btn-primary dropdown-toggle\"\n                                data-toggle=\"dropdown-menu\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                            Algorithms\n                        </button>\n                        <div className={menuClass} aria-labelledby=\"btnGroupDrop1\">\n                            <a id={\"menuButton\"} className = \"btn btn-primary-controlButton\" onClick = { backendDepthFirstSearch.bind(this) }>Backend DFS>\n                                Depth First Search\n                                <p> (Does path Exist)</p>\n                          </a>\n                            <a id={\"menuButton\"} className = \"btn btn-primary-controlButton\" onClick = { backendBreathFirstSearch.bind(this) }>\n                                Breath-First Search\n                                <p>(Shortest Path)</p>\n                            </a>\n                            <a id={\"menuButton\"} className = \"btn btn-primary-controlButton\" onClick = { backendDijkstra.bind(this) }>\n                                Dijkstra's SPF\n                            </a>\n                        </div>\n                    </div>\n                    <Button className = \"btn btn-primary-controlButton\" onClick = {clearGraph.bind(this)}>Clear Graph</Button>\n                    <Button className = \"btn btn-primary-controlButton\"  id = \"barrier\" onClick = { createBarrier.bind(this)}>Draw Barrier</Button>\n                    <Button className = \"btn btn-primary-controlButton\" id =\"addWeights\" onClick = { setWeightButtonFunction.bind(this) }>Set Weights</Button>\n                    </div>\n\n            </div>\n        <div id={\"centerBox\"}>\n         {parent}\n        </div>\n            <div id={\"rightBox\"}>\n                  <MyCard clearMessages = {clearCardMessages.bind(this)} messages = {cardMessages} header = {backendOrFrontEnd} />\n            </div>\n\n\n\n        </div>\n    );\n}\n\nexport default Board\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport Board from './Board.js'\nimport {ToastProvider} from \"react-toast-notifications\";\n\nclass Game extends React.Component {\n    constructor(props)\n    {\n        super(props)\n        this.state =({\n            height : 20,\n            width : 20,\n        })\n    }\n    render() {\n        return (\n\n            <div id =\"body\" className=\"game\">\n\n                <div className=\"game-board\">\n                    <ToastProvider autoDismissTimeout={2000} placement=\"bottom-center\">\n                        <Board height = {this.state.height} width = {this.state.width}/>\n                    </ToastProvider>\n                </div>\n\n                <div className=\"game-info\">\n                </div>\n            </div>\n\n        );\n    }\n}\n\nReactDOM.render(\n    <Game />,\n\n\n    document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}