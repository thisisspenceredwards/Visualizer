{"version":3,"sources":["CustomCard.js","Square.js","QueryBackend.js","Board.js","index.js"],"names":["MyCard","props","loader","holder","i","messages","length","push","Card","Title","key","header","Text","loading","className","Header","Button","id","onClick","clearMessages","bind","Body","Square","state","hover","weight","onMouseEnterSquare","onMouseLeaveSquare","console","log","this","setState","nextProps","nextState","nextContext","stateId","variant","onMouseEnter","onMouseLeave","React","Component","queryBackendHigherOrderFunction","testingUrl","SIZE","WIDTH","dialogToOutput","addToast","urlSuffix","startMarkerIndex","endMarkerIndex","blockedNodes","weights","animate","a","axios","post","then","res","date1","Date","data","appearance","autoDismiss","catch","err","error","Board","useState","cardMessages","setCardMessages","HEIGHT","heightAndWidth","setLoading","backendOrFrontEnd","setBackEndOrFrontEnd","Array","fill","setBlockedNodes","squares","setSquares","setWeights","setStartMarkerIndex","dropDownMenu","setDropDownMenu","setEndMarkerIndex","barrier","setBarrier","useToasts","weightButton","setWeightButton","backendResponse","date2","time","Math","abs","updateMessages","frontendInitialMessage","message","valid","checkForValidMarkers","messageSeparator","sender","unshift","slice","queryBackend","animateWithoutReturnPath","arr","timerID2","tickIndex","secondResetRun","tick2","tickArr","clearInterval","setInterval","animateWithReturnPath","findPathArr","shortestPathArr","finishedAnimatingFindPath","resetRun","clearWeights","createBarrier","setWeightButtonFunction","document","getElementById","innerText","randomizeWeights","generateBacktrack","tempBlockedNodes","generatePrimsTree","generatePrimsMaze","renderSquare","count","index","fork","setWeight","toastMessage","startStateMarker","endStateMarker","SetMarker","toggleOpen","temp","menuClass1","menuClass2","parent","children","j","role","type","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","value","r","clearSquares","Game","autoDismissTimeout","placement","ReactDOM","render"],"mappings":"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","file":"static/js/main.c90003ad.chunk.js","sourcesContent":["import Card from \"react-bootstrap/Card\";\nimport Button from \"react-bootstrap/Button\";\nimport React from \"react\";\nimport RingLoader from \"react-spinners/RingLoader\"\n\nconst MyCard = (props) =>\n{\n    const holder = [];\n    for(let i = 0; i < props.messages.length; i++)\n    {//values will not be sorted or changed in any way such that using the index for the key should be fine\n        holder.push( <Card.Title key = {\"Title\" + i} >{props.header[i]}</Card.Title>)\n        holder.push(  <Card.Text key = {\"Message\" + i}>{props.messages[i]}</Card.Text>)\n    }\n    let loader\n    if(props.loading)\n    {\n        loader =  <div className = \"sweet-loading\">\n            <RingLoader\n            />\n        </div>\n    }\n    return (\n    <Card className=\"text-center\">\n        <Card.Header>\n            <Button id={\"headerButton\"} onClick = {props.clearMessages.bind(this)}>Clear Messages</Button>\n            Messages Sent and Received\n\n        </Card.Header>\n        <Card.Body>\n            {loader}\n            {holder}\n        </Card.Body>\n    </Card>)\n}\nexport default MyCard","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nclass Square extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            hover: false,\n            id: 'grey',\n            weight: 0\n        }\n        this.onMouseEnterSquare = this.onMouseEnterSquare.bind(this)\n        this.onMouseLeaveSquare = this.onMouseLeaveSquare.bind(this)\n        this.onClick = this.onClick.bind(this)\n    }\n\n    onMouseEnterSquare() {\n        console.log(\"this is id: \"  + this.props.id)\n        if(this.props.id === 'black')\n            return\n        this.setState({\n            id: 'redBackground',\n            hover: true\n        })\n    }\n\n    onMouseLeaveSquare() {\n        this.setState({\n            id: 'blueBackground',\n            hover: false\n        })\n    }\n    onClick() {\n        this.props.onClick()\n    }\n    shouldComponentUpdate(nextProps, nextState, nextContext)\n    {\n        if(nextState.id !== this.state.id || this.props.weight !== nextProps.weight || this.props.id !== nextProps.id)\n            return true\n        return false;\n    }\n    render() {\n        let stateId\n        if(!this.state.hover)\n            stateId = this.props.id\n        else\n            stateId = this.state.id\n        return (\n            <Button\n                variant=\"secondary\"\n               className=\"square\"\n                id={stateId}\n                onMouseEnter={this.onMouseEnterSquare.bind()}\n                onMouseLeave={this.onMouseLeaveSquare.bind()}\n                onClick={this.onClick.bind()}>\n                {this.props.weight}\n            </Button>\n        )\n    }\n}\n\nexport default Square\n\n","import axios from \"axios\";\n/*\ncreates a function that returns a function that is responsible for messaging the backend,\nanimating the return values\nor\nresponding that there are no return values to animate\n */\n\n\n\n\n\n\n\nconst queryBackendHigherOrderFunction =  (testingUrl, SIZE, WIDTH, dialogToOutput, addToast) =>\n\n    async  (urlSuffix, startMarkerIndex, endMarkerIndex, blockedNodes, weights, animate) => {\n\n            await axios.post(testingUrl  + urlSuffix, {startMarkerIndex, endMarkerIndex, SIZE, WIDTH, blockedNodes, weights\n            })\n                .then(res => {\n                    const date1 = new Date()\n                    dialogToOutput(date1, res.data[0])\n                    if (res.data[1] !== null ) {\n                        animate(res.data[1])\n                    } else\n                        return (\n                            addToast(\"Path does not exist\", {\n                                appearance: 'warning',\n                                autoDismiss: true,\n                            }))\n                })\n                .catch(err => {\n                    console.error(err)\n                })\n        }\n\nexport default queryBackendHigherOrderFunction","import React, {useState} from \"react\";\nimport MyCard from \"./CustomCard\"\nimport {useToasts} from \"react-toast-notifications\";\nimport Button from \"react-bootstrap/Button\";\nimport Square from \"./Square\"\nimport axios from \"axios\"\nimport queryBackendHigherOrderFunction from \"./QueryBackend\"\n\n\nconst Board = (props) => {\n    //const testingUrl = \"https://visualizerbackend.herokuapp.com/\"\n    const testingUrl = \"http://localhost:9000/\"\n    //can likely optimize blockedNodes\n    let [cardMessages, setCardMessages] = useState([\"Note: If the server has been idle, the initial query may take up to 10 seconds to complete.\",\n                                                            \"Backend is hosted at: https://visualizerbackend.herokuapp.com/\",\n                                                            \"To use:  Click a square to set a start location\",\n                                                                \"Then click another square to select a destination\",\n                                                                    \"You may also set barriers to change the available paths\",\n                                                                        \"For Dijkstra's SPF you can set the weight of each square \" +\n                                                                        \"changing the algorithm's chosen path\",\n                                                                        \"As a note: The path found may not be the 'straightest' path as diagonal moves are valid,\" +\n                                                                        \"but if you count the squares it will be equal to a more intuitive path\"])\n    const HEIGHT = props.heightAndWidth\n    const WIDTH = props.heightAndWidth\n    const SIZE = props.heightAndWidth * props.heightAndWidth\n    const [loading, setLoading] = useState(false)\n    let [backendOrFrontEnd, setBackEndOrFrontEnd] = useState([])\n    const [blockedNodes, setBlockedNodes] = useState(Array(SIZE).fill(false))\n    let [squares, setSquares] = useState(Array(SIZE).fill('grey'))\n    let [weights, setWeights] = useState(Array(SIZE).fill(1))\n    const [startMarkerIndex, setStartMarkerIndex] = useState(-1)\n    const [dropDownMenu, setDropDownMenu] = useState(Array(2).fill(false))\n    const [endMarkerIndex, setEndMarkerIndex] = useState(-1)\n    const [barrier, setBarrier] = useState(false)\n    const {addToast} = useToasts()\n    const [weightButton, setWeightButton] = useState(false)\n\n/*******************************************/\n    /*\n    Methods for Card messages and responses\n     */\n    const backendResponse = (date1, data) =>\n    {\n        setLoading(false)\n        const date2 = new Date()\n        const time = Math.abs(date2-date1)\n        updateMessages(data, 'Backend'  )\n        updateMessages('Query round trip time: ' +  time + \" milliseconds\", 'Frontend')\n    }\n    const frontendInitialMessage = (message) =>\n    {\n        const valid = checkForValidMarkers()\n        if(valid !== null)\n            return valid\n        setLoading(true)\n        messageSeparator()\n        updateMessages(message, 'Frontend')\n        return null\n    }\n    const messageSeparator = () =>\n    {\n        updateMessages(\" \", \" *************************  \")\n    }\n\n    const updateMessages = (data, sender) =>\n    {\n        cardMessages.unshift(data)\n        backendOrFrontEnd.unshift(sender)\n        setCardMessages(cardMessages.slice())\n        setBackEndOrFrontEnd(backendOrFrontEnd.slice())\n\n    }\n    const clearCardMessages = () =>\n    {\n        setCardMessages([])\n        setBackEndOrFrontEnd([])\n    }\n    /*********************************************/\n    //Higher order function to make querying the backend more concise and easier\n    const queryBackend = queryBackendHigherOrderFunction(testingUrl, SIZE, WIDTH, backendResponse, addToast)\n   /******************************************/\n    /* Methods for SPF algorithms */\n    let backendDijkstra = () =>\n    {\n        const value = frontendInitialMessage('Sending data for Dijkstra')\n        if(value !== null) return value\n        queryBackend('dijkstra', startMarkerIndex, endMarkerIndex, blockedNodes, weights, animateWithReturnPath).then(r => console.log(\"hey\"))\n    }\n    const backendDepthFirstSearch = () =>\n    {\n        const value = frontendInitialMessage('Sending data for DFS')\n        if(value !== null) return value\n        queryBackend('depthFirstSearch', startMarkerIndex, endMarkerIndex, blockedNodes, weights, animateWithoutReturnPath).then(r => console.log(\"ok\"))\n    }\n\n    const backendBreathFirstSearch = () => {\n        const value = frontendInitialMessage(\"Sending data for BFS\")\n        if(value !== null) return value\n        queryBackend('breathFirstSearch', startMarkerIndex, endMarkerIndex, blockedNodes, weights, animateWithReturnPath).then(r => console.log(\"ok\"))\n    }\n    /********************************************************/\n    let animateWithoutReturnPath = (arr) => {\n        let tickIndex = 1\n        let timerID2\n        secondResetRun()\n        const clearTickInterval = () => {\n            clearInterval(timerID2)\n        }\n\n        const tick2 = (tickArr) => {\n            if (tickIndex < tickArr.length - 1) {\n                //mutating the array directly :/\n                squares[tickArr[tickIndex]] = 'green'\n                tickIndex++\n                setSquares(squares.slice())\n            } else {\n                clearTickInterval(timerID2)\n                if(tickArr[tickArr.length - 1] === false) {\n                    setSquares(squares.slice())\n                    return (\n                        addToast(\"Path does not exist\", {\n                            appearance: 'warning',\n                            autoDismiss: true,\n                        }))\n                }\n                squares[tickArr[tickArr.length - 1]] = 'gold'\n                setSquares(squares.slice())\n                return (\n                    addToast(\"Path does exist\", {\n                        appearance: 'success',\n                        autoDismiss: true,\n                    }))\n            }\n        }\n        timerID2 = setInterval(\n            () => tick2(arr),\n            10\n        )\n    }\n    let animateWithReturnPath = (arr) => {\n        const findPathArr = arr[0]\n        const shortestPathArr = arr[1]\n        let tickIndex = 0\n        let timerID2\n        secondResetRun()\n        const clearTickInterval = () => {\n            clearInterval(timerID2)\n        }\n        let finishedAnimatingFindPath = false\n        const tick2 = (findPathArr, shortestPathArr) =>\n        {\n            if(!finishedAnimatingFindPath)\n            {\n                if (tickIndex <= findPathArr.length) {\n                    for(let i = 0; i < 4; i++)\n                    {\n                        //mutating the array directly -- doesn't seem to update promptly otherwise\n                        if (tickIndex <= findPathArr.length && findPathArr[tickIndex] !== endMarkerIndex && findPathArr[tickIndex] !== startMarkerIndex)\n                        {\n                            squares[findPathArr[tickIndex]] = 'green'\n                        }\n                        tickIndex++\n                    }\n                }\n                else\n                {\n                    finishedAnimatingFindPath = true\n                    squares[endMarkerIndex] = 'gold'\n                    tickIndex = 0\n                }\n                setSquares(squares.slice())\n            }\n            else\n            {\n                if(tickIndex < shortestPathArr.length - 1)\n                {\n                    squares[shortestPathArr[tickIndex]] = 'gold'\n                    setSquares(squares.slice())\n                    tickIndex++\n                }\n                else{\n                    squares[shortestPathArr[shortestPathArr.length - 1]] = 'gold'\n                    setSquares(squares.slice())\n                    clearTickInterval(timerID2)\n                }\n            }\n        }\n        timerID2 = setInterval(\n            () => tick2(findPathArr, shortestPathArr),\n            0\n        )\n    }\n\n    const setWeight = (count) => {\n        weights[count] = weights[count]+1\n        setWeights(weights.slice())\n    }\n\n    const checkForValidMarkers = () => {\n        if (startMarkerIndex < 0 || endMarkerIndex < 0) {\n            return (\n                addToast(\"Please select a starting and ending location first\", {\n                    appearance: 'warning',\n                    autoDismiss: true,\n                }))\n        } else return null\n    }\n\n\n    let SetMarker = (i) => {\n        let toastMessage = \"\"\n        let startStateMarker = startMarkerIndex;\n        let endStateMarker = endMarkerIndex;\n        if(blockedNodes[i]) //is already a blocked node.  Nothing to do with those\n        {\n            return\n        }\n        if (barrier) { //manually setting barrier\n            blockedNodes[i] = true\n            setBlockedNodes(blockedNodes.slice())\n            squares[i] = 'black'\n            setSquares(squares.slice())\n            return\n        } else if (startStateMarker === i) {\n            squares[i] = 'grey'\n            startStateMarker = -1\n            //arr[i] = undefined\n            toastMessage = \"Deselected Start Location\"\n            resetRun()\n           // clearAlgorithm()\n           // resetRun()\n        } else if (startStateMarker < 0 && endStateMarker === i) {\n            endStateMarker = -1\n            squares[i] = 'grey'\n            resetRun()\n            toastMessage = \"Deselected End Location\"\n        } else if (startStateMarker < 0) {\n            startStateMarker = i\n            squares[i] = 'startMarker'\n            toastMessage = \"Start Location Selected\"\n        } else if (endStateMarker === i) {\n            squares[i] = 'grey'\n            endStateMarker = -1\n            resetRun()\n            toastMessage = \"Deselected End Location\"\n        } else if (endStateMarker < 0) {\n            endStateMarker = i\n            squares[i] = 'endMarker'\n            toastMessage = \"Selected End Location\"\n        } else {\n            return\n        }\n        setStartMarkerIndex(startStateMarker)\n        setEndMarkerIndex(endStateMarker)\n        squares[startStateMarker] = 'startMarker'\n        squares[endStateMarker] = 'endMarker'\n        setSquares(squares.slice())\n        return (\n            addToast(toastMessage, {\n                appearance: 'info',\n                autoDismiss: true,\n            }))\n    }\n\n    const clearSquares = () => {\n        //squares not changing without setting squares explicitly\n        for(let i = 0; i < squares.length; i++) {\n            squares = Array(SIZE).fill(null)\n            setSquares(Array(SIZE).fill(null))\n        }\n    }\n    const resetRun = () =>{\n        for(let i = 0; i < squares.length; i++) {\n            if (squares[i] === 'green' || squares[i] === 'gold') {\n                squares[i] = 'grey'\n            }\n        }\n        setSquares(squares.slice())\n    }\n    const secondResetRun = () =>{\n        for(let i = 0; i < squares.length; i++) {\n            if (squares[i] === 'green' || squares[i] === 'gold') {\n                squares[i] = 'grey'\n            }\n        }\n        squares[startMarkerIndex] = 'startMarker'\n        squares[endMarkerIndex] = 'endMarker'\n        setSquares(squares.slice())\n    }\n    const clearBarrier = () => {\n        setBlockedNodes(Array(SIZE).fill(false))\n    }\n    const clearMarkers = () => {\n        setStartMarkerIndex(-1)\n        setEndMarkerIndex(-1)\n    }\n    const clearWeights = () => {\n        setWeights(Array(SIZE).fill(1))\n    }\n    const clearGraph = () => {\n        clearSquares()\n        clearBarrier()\n        clearMarkers()\n        clearWeights()\n    }\n    const createBarrier = () => {\n        setBarrier(!barrier)\n        if(weightButton)\n        {\n            setWeightButtonFunction()\n        }\n        if (barrier)\n            document.getElementById(\"barrier\").innerText = \"Draw Barrier\"\n        else\n            document.getElementById(\"barrier\").innerText = \"Disable Barrier\"\n    }\n\n    const setWeightButtonFunction = () =>\n    {\n        setWeightButton(!weightButton)\n        if(barrier)\n        {\n            createBarrier()\n        }\n        if(weightButton)\n            document.getElementById(\"addWeights\").innerText = \"Set Weights\"\n        else\n            document.getElementById(\"addWeights\").innerText = \"Toggle Weights Off\"\n\n    }\n    const randomizeWeights = async () =>\n    {\n        let date1 = new Date()\n        setLoading(true)\n        messageSeparator()\n        updateMessages('Sending data for random weight generation', 'Frontend')\n        await axios.post(testingUrl + 'weightGeneration', {SIZE})\n            .then(res => {\n                setLoading(false)\n                backendResponse(date1, res.data[0])\n                setWeights(res.data[1])\n            })\n    }\n    const generateBacktrack = async () =>\n    {\n        let date1 = new Date()\n        setLoading(true)\n        messageSeparator()\n        updateMessages('Sending data for maze generation', 'Frontend')\n        await axios.post(testingUrl + 'generateBacktracking', {startMarkerIndex, endMarkerIndex, SIZE, WIDTH, HEIGHT, squares, blockedNodes, weights })\n            .then(res=>{\n                setLoading(false)\n                backendResponse(date1, res.data[0])\n                let arr = res.data[1]\n                let tempBlockedNodes = Array(SIZE).fill(false)\n                for(let i = 0; i < arr.length; i++)\n                {\n                    if(arr[i] === 'black')\n                        tempBlockedNodes[i] = true\n                }\n                setBlockedNodes(tempBlockedNodes)\n                setSquares(res.data[1])\n            })\n            .catch(err => {console.error(err)})\n    }\n    const generatePrimsTree = async () =>\n    {\n        let date1 = new Date()\n        setLoading(true)\n        messageSeparator()\n        updateMessages('Sending data for maze generation', 'Frontend')\n        await axios.post(testingUrl + 'primsTree', {startMarkerIndex, SIZE, WIDTH, blockedNodes, weights })\n            .then(res=>{\n                /*setLoading(false)\n                backendResponse(date1, res.data[0])\n                let arr = res.data[1]\n                let tempBlockedNodes = Array(SIZE).fill(false)\n                for(let i = 0; i < arr.length; i++)\n                {\n                    if(arr[i] === 'black')\n                        tempBlockedNodes[i] = true\n                }\n                setBlockedNodes(tempBlockedNodes)\n                setSquares(res.data[1])*/\n            })\n            .catch(err => {console.error(err)})\n    }\n    const generatePrimsMaze = async () =>\n    {\n        let date1 = new Date()\n        setLoading(true)\n        messageSeparator()\n        updateMessages('Sending data for maze generation', 'Frontend')\n        await axios.post(testingUrl + 'generatePrimsMaze', {startMarkerIndex, endMarkerIndex, SIZE, WIDTH, HEIGHT, squares, blockedNodes, weights })\n            .then(res=>{\n                setLoading(false)\n                backendResponse(date1, res.data[0])\n                let arr = res.data[1]\n                let tempBlockedNodes = Array(SIZE).fill(false)\n                for(let i = 0; i < arr.length; i++)\n                {\n                    if(arr[i] === 'black')\n                        tempBlockedNodes[i] = true\n                }\n                setBlockedNodes(tempBlockedNodes)\n                setSquares(res.data[1])\n            })\n            .catch(err => {console.error(err)})\n    }\n\n    /**************************************/\n    /* methods to control menus */\n\n    let renderSquare = (count) => {\n        return (<Square id={squares[count]} index={count} weight = {weights[count]} onClick={fork.bind(this, count)} key={count}/>)\n    }\n    let fork = (i) => {\n        if(weightButton)\n            setWeight(i)\n        else\n            SetMarker(i)\n    }\n    const toggleOpen = (i) =>\n    {\n        const temp = [false, false]\n        temp[i] = !dropDownMenu[i]\n        setDropDownMenu(temp)\n    }\n    const menuClass1 = `dropdown-menu ${ dropDownMenu[0]? \" show\": \"\"}`\n    const menuClass2 = `dropdown-menu ${ dropDownMenu[1]? \" show\": \"\"}`\n\n    /***************************************/\n    /* everything below is to render the board*/\n    let parent = []\n    let count = 0\n    for (let i = 0; i < WIDTH; i++) {\n        let children = []\n        for (let j = 0; j < HEIGHT; j++) {\n            children.push(renderSquare(count))\n            count++\n        }\n        parent.push(<div key={i} className={\"board-row\"}>{children}</div>)\n    }\n\n    return (\n        <div id={\"box\"}>\n            <div id={\"leftBox\"}>\n                    <div id = \"buttons1\" className = \"btn-group-vertical\" role={\"group\"}>\n                        <div className=\"btn-group\" role=\"group\">\n                            <button id=\"btnGroupDrop\" type=\"button\"  onClick = {toggleOpen.bind(this, 0)} className=\"btn btn-primary dropdown-toggle\"\n                                data-toggle=\"dropdown-menu\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                                Shortest Path Algorithms\n                            </button>\n                            <div className={menuClass1} aria-labelledby=\"btnGroupDrop1\">\n                                <a id={\"menuButton\"} className = \"btn btn-primary-controlButton\" onClick = { backendDepthFirstSearch.bind(this) }>\n                                    Depth First Search\n                                    <p> (Does path Exist)</p>\n                                </a>\n                                <a id={\"menuButton\"} className = \"btn btn-primary-controlButton\" onClick = { backendBreathFirstSearch.bind(this) }>\n                                    Breath-First Search\n                                    <p>(Shortest Path)</p>\n                                </a>\n                                <a id={\"menuButton\"} className = \"btn btn-primary-controlButton\" onClick = { backendDijkstra.bind(this) }>\n                                    Dijkstra's SPF\n                                </a>\n                                <a id={\"menuButton\"} className = \"btn btn-primary-controlButton1\" onClick = { generatePrimsTree.bind(this) }>\n                                    Prim's Minimum Spanning Tree\n                                    <p>(Not yet implemented)</p>\n                                </a>\n                            </div>\n                        </div>\n                        <div className=\"btn-group\" role=\"group\">\n                            <button id=\"btnGroupDrop\" type=\"button\"  onClick = {toggleOpen.bind(this, 1)} className=\"btn btn-primary dropdown-toggle\"\n                                    data-toggle=\"dropdown-menu\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                                Maze Generation Algorithms\n                            </button>\n                            <div className={menuClass2} aria-labelledby=\"btnGroupDrop11\">\n                                <a id={\"menuButton\"} className = \"btn btn-primary-controlButton1\" onClick = { generatePrimsMaze.bind(this) }>\n                                    Prim's Maze\n                                </a>\n                                <a id={\"menuButton\"} className = \"btn btn-primary-controlButton1\" onClick = { generateBacktrack.bind(this) }>\n                                    Recursive Backtracking\n                                </a>\n\n                            </div>\n                        </div>\n                    <Button className = \"btn btn-lg btn-primary-controlButton\" onClick = {clearGraph.bind(this)}>Clear Graph</Button>\n                    <Button className = \"btn btn-lg btn-primary-controlButton\"  id = \"barrier\" onClick = { createBarrier.bind(this)}>Draw Barrier</Button>\n                    <Button className = \"btn btn-lg btn-primary-controlButton\" id =\"addWeights\" onClick = { setWeightButtonFunction.bind(this) }>Set Weights</Button>\n                        <Button className = \"btn btn-lg btn-primary-controlButton\" id =\"randomizeWeights\" onClick = { randomizeWeights.bind(this)}>Randomize Weights</Button>\n                    <Button className = \"btn btn-lg btn-primary-controlButton\" id = \"randomizeWeights\" onClick = { clearWeights.bind(this)}>Remove Weights</Button>\n                    </div>\n            </div>\n            <div id={\"centerBox\"}>\n                {parent}\n                <div id={\"rightBox\"}>\n                    <MyCard loading = {loading} clearMessages = {clearCardMessages.bind(this)} messages = {cardMessages} header = {backendOrFrontEnd} />\n\n                </div>\n            </div>\n\n\n        </div>\n    );\n}\n\nexport default Board\n\n\n/*\n\n */","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport Board from './Board.js'\nimport {ToastProvider} from \"react-toast-notifications\";\n\nclass Game extends React.Component {\n    constructor(props)\n    {\n        super(props)\n        this.state =({\n            //must be square\n            heightAndWidth : 40,\n        })\n    }\n    render() {\n        return (\n\n            <div id =\"body\" className=\"game\">\n\n                <div className=\"game-board\">\n                    <ToastProvider id = {\"toasty\"} autoDismissTimeout={2000} placement=\"bottom-center\">\n                        <Board id={\"board\"} heightAndWidth = {this.state.heightAndWidth}/>\n                    </ToastProvider>\n                </div>\n            </div>\n\n        );\n    }\n}\n\nReactDOM.render(\n    <Game />,\n\n\n    document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}