{"version":3,"sources":["CustomCard.js","Square.js","Board.js","QueryBackend.js","index.js"],"names":["MyCard","props","loader","holder","i","messages","length","push","Card","Title","key","header","Text","loading","className","Header","Button","id","onClick","clearMessages","bind","Body","Square","state","hover","weight","onMouseEnterSquare","onMouseLeaveSquare","console","log","this","setState","nextProps","nextState","nextContext","stateId","variant","onMouseEnter","onMouseLeave","React","Component","Board","testingUrl","useState","cardMessages","setCardMessages","HEIGHT","heightAndWidth","WIDTH","SIZE","setLoading","backendOrFrontEnd","setBackEndOrFrontEnd","Array","fill","blockedNodes","setBlockedNodes","squares","setSquares","weights","setWeights","startMarkerIndex","setStartMarkerIndex","dropDownMenu","setDropDownMenu","endMarkerIndex","setEndMarkerIndex","barrier","setBarrier","addToast","useToasts","weightButton","setWeightButton","backendResponse","date1","data","date2","Date","time","Math","abs","updateMessages","frontendInitialMessage","message","caller","checkForValidMarkers","messageSeparator","sender","unshift","slice","queryBackendSPF","urlSuffix","animate","a","axios","post","then","res","appearance","autoDismiss","catch","err","error","queryBackendHigherOrderFunctionSPF","queryBackendMaze","arr","tempBlockedNodes","queryBackendHigherOrderFunctionMaze","generatePrimsMaze","r","animateWithoutReturnPath","timerID2","tickIndex","resetBoardOnAlgorithmRun","current","tick2","tickArr","clearInterval","setInterval","animateWithReturnPath","findPathArr","shortestPathArr","finishedAnimatingFindPath","resetBoardOnDestinationChange","clearWeights","createBarrier","setWeightButtonFunction","document","getElementById","innerText","randomizeWeights","generatePrimsTree","renderSquare","count","index","fork","setWeight","toastMessage","startStateMarker","endStateMarker","SetMarker","toggleOpen","temp","menuClass1","menuClass2","parent","children","j","role","type","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","value","clearSquares","Game","autoDismissTimeout","placement","ReactDOM","render"],"mappings":"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","file":"static/js/main.7557bec1.chunk.js","sourcesContent":["import Card from \"react-bootstrap/Card\";\nimport Button from \"react-bootstrap/Button\";\nimport React from \"react\";\nimport RingLoader from \"react-spinners/RingLoader\"\n\nconst MyCard = (props) =>\n{\n    const holder = [];\n    for(let i = 0; i < props.messages.length; i++)\n    {//values will not be sorted or changed in any way such that using the index for the key should be fine\n        holder.push( <Card.Title key = {\"Title\" + i} >{props.header[i]}</Card.Title>)\n        holder.push(  <Card.Text key = {\"Message\" + i}>{props.messages[i]}</Card.Text>)\n    }\n    let loader\n    if(props.loading)\n    {\n        loader =  <div className = \"sweet-loading\">\n            <RingLoader\n            />\n        </div>\n    }\n    return (\n    <Card className=\"text-center\">\n        <Card.Header>\n            <Button id={\"headerButton\"} onClick = {props.clearMessages.bind(this)}>Clear Messages</Button>\n            Messages Sent and Received\n\n        </Card.Header>\n        <Card.Body>\n            {loader}\n            {holder}\n        </Card.Body>\n    </Card>)\n}\nexport default MyCard","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nclass Square extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            hover: false,\n            id: 'grey',\n            weight: 0\n        }\n        this.onMouseEnterSquare = this.onMouseEnterSquare.bind(this)\n        this.onMouseLeaveSquare = this.onMouseLeaveSquare.bind(this)\n        this.onClick = this.onClick.bind(this)\n    }\n\n    onMouseEnterSquare() {\n        console.log(\"this is id: \"  + this.props.id)\n        if(this.props.id === 'black')\n            return\n        this.setState({\n            id: 'redBackground',\n            hover: true\n        })\n    }\n\n    onMouseLeaveSquare() {\n        this.setState({\n            id: 'blueBackground',\n            hover: false\n        })\n    }\n    onClick() {\n        this.props.onClick()\n    }\n    shouldComponentUpdate(nextProps, nextState, nextContext)\n    {\n        if(nextState.id !== this.state.id || this.props.weight !== nextProps.weight || this.props.id !== nextProps.id)\n            return true\n        return false;\n    }\n    render() {\n        let stateId\n        if(!this.state.hover)\n            stateId = this.props.id\n        else\n            stateId = this.state.id\n        console.log(stateId)\n        return (\n            <Button\n                variant=\"secondary\"\n               className=\"square\"\n                id={stateId}\n                onMouseEnter={this.onMouseEnterSquare.bind()}\n                onMouseLeave={this.onMouseLeaveSquare.bind()}\n                onClick={this.onClick.bind()}>\n                {this.props.weight}\n            </Button>\n        )\n    }\n}\n\nexport default Square\n\n","import React, {useState} from \"react\";\nimport MyCard from \"./CustomCard\"\nimport {useToasts} from \"react-toast-notifications\";\nimport Button from \"react-bootstrap/Button\";\nimport Square from \"./Square\"\nimport axios from \"axios\"\nimport {queryBackendHigherOrderFunctionSPF, queryBackendHigherOrderFunctionMaze} from \"./QueryBackend\"\n\n\nconst Board = (props) => {\n    const testingUrl = \"https://visualizerbackend.herokuapp.com/\"\n    //const testingUrl = \"http://localhost:9000/\"\n    //can likely optimize blockedNodes\n    let [cardMessages, setCardMessages] = useState([\"Note: If the server has been idle, the initial query may take up to 10 seconds to complete.\",\n                                                            \"Backend is hosted at: https://visualizerbackend.herokuapp.com/\",\n                                                            \"To use:  Click a square to set a start location\",\n                                                                \"Then click another square to select a destination\",\n                                                                    \"You may also set barriers to change the available paths\",\n                                                                        \"For Dijkstra's SPF you can set the weight of each square \" +\n                                                                        \"changing the algorithm's chosen path\",\n                                                                        \"As a note: The path found may not be the 'straightest' path as diagonal moves are valid,\" +\n                                                                        \"but if you count the squares it will be equal to a more intuitive path\"])\n    const HEIGHT = props.heightAndWidth\n    const WIDTH = props.heightAndWidth\n    const SIZE = props.heightAndWidth * props.heightAndWidth\n    const [loading, setLoading] = useState(false)\n    let [backendOrFrontEnd, setBackEndOrFrontEnd] = useState([])\n    const [blockedNodes, setBlockedNodes] = useState(Array(SIZE).fill(false))\n    let [squares, setSquares] = useState(Array(SIZE).fill('grey'))\n    let [weights, setWeights] = useState(Array(SIZE).fill(1))\n    const [startMarkerIndex, setStartMarkerIndex] = useState(-1)\n    const [dropDownMenu, setDropDownMenu] = useState(Array(2).fill(false))\n    const [endMarkerIndex, setEndMarkerIndex] = useState(-1)\n    const [barrier, setBarrier] = useState(false)\n    const {addToast} = useToasts()\n    const [weightButton, setWeightButton] = useState(false)\n\n/*******************************************/\n    /*\n    Methods for Card messages and responses\n     */\n    const backendResponse = (date1, data) =>\n    {\n        setLoading(false)\n        const date2 = new Date()\n        const time = Math.abs(date2-date1)\n        updateMessages(data, 'Backend'  )\n        updateMessages('Query round trip time: ' +  time + \" milliseconds\", 'Frontend')\n    }\n    const frontendInitialMessage = (message, caller) =>\n    {\n        if(caller === true)\n            if(checkForValidMarkers())\n                return\n        setLoading(true)\n        messageSeparator()\n        updateMessages(message, 'Frontend')\n        return null\n    }\n    const messageSeparator = () =>\n    {\n        updateMessages(\" \", \" *************************  \")\n    }\n\n    const updateMessages = (data, sender) =>\n    {\n        cardMessages.unshift(data)\n        backendOrFrontEnd.unshift(sender)\n        setCardMessages(cardMessages.slice())\n        setBackEndOrFrontEnd(backendOrFrontEnd.slice())\n\n    }\n    const clearCardMessages = () =>\n    {\n        setCardMessages([])\n        setBackEndOrFrontEnd([])\n    }\n    /*********************************************/\n    //Higher order function to make querying the backend more concise and easier\n    const queryBackendSPF = queryBackendHigherOrderFunctionSPF(testingUrl, SIZE, WIDTH, backendResponse, addToast)\n    const queryBackendMaze = queryBackendHigherOrderFunctionMaze(testingUrl, SIZE, WIDTH, HEIGHT, backendResponse, addToast, setBlockedNodes, setSquares)\n   /******************************************/\n    /* Methods for SPF algorithms */\n    let backendDijkstra = () =>\n    {\n        const value = frontendInitialMessage('Sending data for Dijkstra', true)\n        if(value !== null) return value\n        queryBackendSPF('dijkstra', startMarkerIndex, endMarkerIndex, blockedNodes, weights, animateWithReturnPath).then(r => console.log(\"hey\"))\n    }\n    const backendDepthFirstSearch = () =>\n    {\n        const value = frontendInitialMessage('Sending data for DFS', true)\n        if(value !== null) return value\n        queryBackendSPF('depthFirstSearch', startMarkerIndex, endMarkerIndex, blockedNodes, weights, animateWithoutReturnPath).then(r => console.log(\"ok\"))\n    }\n\n    const backendBreathFirstSearch = () => {\n        const value = frontendInitialMessage(\"Sending data for BFS\", true)\n        if(value !== null) return value\n\n        queryBackendSPF('breathFirstSearch', startMarkerIndex, endMarkerIndex, blockedNodes, weights, animateWithReturnPath).then(r => console.log(\"ok\"))\n    }\n    // MAZES\n    const generateBacktrack = () =>\n    {\n        frontendInitialMessage('Sending data for Recursive Backtracking Maze Generation', false)\n        console.log(\"startMarkerIndex: \" + startMarkerIndex)\n        queryBackendMaze('generateBacktracking', startMarkerIndex, endMarkerIndex, squares, blockedNodes, weights).then(r => console.log())\n        console.log(\"startMarkerIndAfterex: \" + startMarkerIndex)\n    }\n\n    const generatePrimsMaze = async () =>\n    {\n        frontendInitialMessage(\"Sending data for Prim's Maze Generation\", false)\n        queryBackendMaze('generatePrimsMaze', startMarkerIndex, endMarkerIndex, squares, blockedNodes, weights).then(r => console.log())\n    }\n    /********************************************************/\n    let animateWithoutReturnPath = (arr) => {\n        let tickIndex = 1\n        let timerID2\n        resetBoardOnAlgorithmRun()\n        const clearTickInterval = () => {\n            clearInterval(timerID2)\n        }\n        const trail = 20\n        let current = trail\n        const tick2 = (tickArr) => {\n            if (tickIndex < tickArr.length - 1) {\n                //mutating the array directly :/\n                squares[tickArr[tickIndex]] = 'maroon'\n                if(tickIndex > trail) {\n                   squares[tickArr[tickIndex-trail]] = 'green'\n                }\n                tickIndex++\n                setSquares(squares.slice())\n            } else\n                {\n                    if(current > 0)\n                    {\n                        squares[tickArr[tickIndex-current]] = 'green'\n                        current--\n                        setSquares(squares.slice())\n                    }\n                    else {\n                        clearTickInterval(timerID2)\n                        if (tickArr[tickArr.length - 1] === false) {\n                            setSquares(squares.slice())\n                            return (\n                                addToast(\"Path does not exist\", {\n                                    appearance: 'warning',\n                                    autoDismiss: true,\n                                }))\n                        } else {\n                            squares[tickArr[tickArr.length - 1]] = 'gold'\n                            setSquares(squares.slice())\n                            return (\n                                addToast(\"Path does exist\", {\n                                    appearance: 'success',\n                                    autoDismiss: true,\n                                }))\n                        }\n                    }\n            }\n        }\n        timerID2 = setInterval(\n            () => tick2(arr),\n            10\n        )\n    }\n    let animateWithReturnPath = (arr) => {\n        const trail = 25\n        const findPathArr = arr[0]\n        const shortestPathArr = arr[1]\n        let tickIndex = 0\n        let timerID2\n        resetBoardOnAlgorithmRun()\n        const clearTickInterval = () => {\n            clearInterval(timerID2)\n        }\n        let finishedAnimatingFindPath = false\n        const tick2 = (findPathArr, shortestPathArr) =>\n        {\n            if(!finishedAnimatingFindPath)\n            {\n                if (tickIndex <= findPathArr.length) {\n                    for(let i = 0; i < 4; i++)\n                    {\n\n                        //mutating the array directly -- doesn't seem to update promptly otherwise\n                        if (tickIndex <= findPathArr.length && findPathArr[tickIndex] !== endMarkerIndex && findPathArr[tickIndex] !== startMarkerIndex)\n                        {\n                           // squares[findPathArr[tickIndex]] = 'maroon'\n                           // if(tickIndex > trail) {\n                           //     squares[findPathArr[tickIndex-trail]] = 'green'\n                           // }\n                            squares[findPathArr[tickIndex]] = 'green'\n                        }\n                        tickIndex++\n                    }\n                }\n                else\n                {\n                    finishedAnimatingFindPath = true\n                    squares[endMarkerIndex] = 'gold'\n                    tickIndex = 0\n                }\n                setSquares(squares.slice())\n            }\n            else\n            {\n                if(tickIndex < shortestPathArr.length - 1)\n                {\n                    squares[shortestPathArr[tickIndex]] = 'gold'\n                    setSquares(squares.slice())\n                    tickIndex++\n                }\n                else{\n                    squares[shortestPathArr[shortestPathArr.length - 1]] = 'gold'\n                    setSquares(squares.slice())\n                    clearTickInterval(timerID2)\n                }\n            }\n        }\n        timerID2 = setInterval(\n            () => tick2(findPathArr, shortestPathArr),\n            0\n        )\n    }\n\n    const setWeight = (count) => {\n        weights[count] = weights[count]+1\n        setWeights(weights.slice())\n    }\n\n    const checkForValidMarkers = () => {\n        if (startMarkerIndex < 0 || endMarkerIndex < 0) {\n            return (\n                addToast(\"Please select a starting and ending location first\", {\n                    appearance: 'warning',\n                    autoDismiss: true,\n                }))\n        } else return null\n    }\n\n\n    let SetMarker = (i) => {\n        let toastMessage = \"\"\n        let startStateMarker = startMarkerIndex;\n        let endStateMarker = endMarkerIndex;\n        if(blockedNodes[i]) //is already a blocked node.  Nothing to do with those\n        {\n            return\n        }\n        if (barrier) { //manually setting barrier\n            blockedNodes[i] = true\n            setBlockedNodes(blockedNodes.slice())\n            squares[i] = 'black'\n            setSquares(squares.slice())\n            return\n        } else if (startStateMarker === i) {\n            squares[i] = 'grey'\n            startStateMarker = -1\n            toastMessage = \"Deselected Start Location\"\n            resetBoardOnDestinationChange()\n        } else if (startStateMarker < 0 && endStateMarker === i) {\n            endStateMarker = -1\n            squares[i] = 'grey'\n            resetBoardOnDestinationChange()\n            toastMessage = \"Deselected End Location\"\n        } else if (startStateMarker < 0) {\n            startStateMarker = i\n            squares[i] = 'startMarker'\n            toastMessage = \"Start Location Selected\"\n        } else if (endStateMarker === i) {\n            squares[i] = 'grey'\n            endStateMarker = -1\n            resetBoardOnDestinationChange()\n            toastMessage = \"Deselected End Location\"\n        } else if (endStateMarker < 0) {\n            endStateMarker = i\n            squares[i] = 'endMarker'\n            toastMessage = \"Selected End Location\"\n        } else {\n            return\n        }\n        setStartMarkerIndex(startStateMarker)\n        setEndMarkerIndex(endStateMarker)\n        squares[startStateMarker] = 'startMarker'\n        squares[endStateMarker] = 'endMarker'\n        setSquares(squares.slice())\n        return (\n            addToast(toastMessage, {\n                appearance: 'info',\n                autoDismiss: true,\n            }))\n    }\n\n    const clearSquares = () => {\n        //squares not changing without setting squares explicitly\n        for(let i = 0; i < squares.length; i++) {\n            squares = Array(SIZE).fill(null)\n            setSquares(Array(SIZE).fill(null))\n        }\n    }\n    const resetBoardOnDestinationChange = () =>{\n        for(let i = 0; i < squares.length; i++) {\n            if (squares[i] === 'green' || squares[i] === 'gold') {\n                squares[i] = 'grey'\n            }\n        }\n        setSquares(squares.slice())\n    }\n    const resetBoardOnAlgorithmRun = () =>{\n        for(let i = 0; i < squares.length; i++) {\n            if (squares[i] === 'green' || squares[i] === 'gold') {\n                squares[i] = 'grey'\n            }\n        }\n        squares[startMarkerIndex] = 'startMarker'\n        squares[endMarkerIndex] = 'endMarker'\n        setSquares(squares.slice())\n    }\n    const clearBarrier = () => {\n        setBlockedNodes(Array(SIZE).fill(false))\n    }\n    const clearMarkers = () => {\n        setStartMarkerIndex(-1)\n        setEndMarkerIndex(-1)\n    }\n    const clearWeights = () => {\n        setWeights(Array(SIZE).fill(1))\n    }\n    const clearGraph = () => {\n        clearSquares()\n        clearBarrier()\n        clearMarkers()\n        clearWeights()\n    }\n    const createBarrier = () => {\n        setBarrier(!barrier)\n        if(weightButton)\n        {\n            setWeightButtonFunction()\n        }\n        if (barrier)\n            document.getElementById(\"barrier\").innerText = \"Draw Barrier\"\n        else\n            document.getElementById(\"barrier\").innerText = \"Disable Barrier\"\n    }\n\n    const setWeightButtonFunction = () =>\n    {\n        setWeightButton(!weightButton)\n        if(barrier)\n        {\n            createBarrier()\n        }\n        if(weightButton)\n            document.getElementById(\"addWeights\").innerText = \"Set Weights\"\n        else\n            document.getElementById(\"addWeights\").innerText = \"Toggle Weights Off\"\n\n    }\n    const randomizeWeights = async () =>\n    {\n        let date1 = new Date()\n        setLoading(true)\n        messageSeparator()\n        updateMessages('Sending data for random weight generation', 'Frontend')\n        await axios.post(testingUrl + 'weightGeneration', {SIZE})\n            .then(res => {\n                setLoading(false)\n                backendResponse(date1, res.data[0])\n                setWeights(res.data[1])\n            })\n    }\n\n    const generatePrimsTree = async () =>\n    {\n        let date1 = new Date()\n        setLoading(true)\n        messageSeparator()\n        updateMessages('Sending data for maze generation', 'Frontend')\n        await axios.post(testingUrl + 'primsTree', {startMarkerIndex, SIZE, WIDTH, blockedNodes, weights })\n            .then(res=>{\n                /*setLoading(false)\n                backendResponse(date1, res.data[0])\n                let arr = res.data[1]\n                let tempBlockedNodes = Array(SIZE).fill(false)\n                for(let i = 0; i < arr.length; i++)\n                {\n                    if(arr[i] === 'black')\n                        tempBlockedNodes[i] = true\n                }\n                setBlockedNodes(tempBlockedNodes)\n                setSquares(res.data[1])*/\n            })\n            .catch(err => {console.error(err)})\n    }\n\n    /**************************************/\n    /* methods to control menus */\n\n    let renderSquare = (count) => {\n        return (<Square id={squares[count]} index={count} weight = {weights[count]} onClick={fork.bind(this, count)} key={count}/>)\n    }\n    let fork = (i) => {\n        if(weightButton)\n            setWeight(i)\n        else\n            SetMarker(i)\n    }\n    const toggleOpen = (i) =>\n    {\n        const temp = [false, false]\n        temp[i] = !dropDownMenu[i]\n        setDropDownMenu(temp)\n    }\n    const menuClass1 = `dropdown-menu ${ dropDownMenu[0]? \" show\": \"\"}`\n    const menuClass2 = `dropdown-menu ${ dropDownMenu[1]? \" show\": \"\"}`\n\n    /***************************************/\n    /* everything below is to render the board*/\n    let parent = []\n    let count = 0\n    for (let i = 0; i < WIDTH; i++) {\n        let children = []\n        for (let j = 0; j < HEIGHT; j++) {\n            children.push(renderSquare(count))\n            count++\n        }\n        parent.push(<div key={i} className={\"board-row\"}>{children}</div>)\n    }\n\n    return (\n        <div id={\"box\"}>\n            <div id={\"leftBox\"}>\n                    <div id = \"buttons1\" className = \"btn-group-vertical\" role={\"group\"}>\n                        <div className=\"btn-group\" role=\"group\">\n                            <button id=\"btnGroupDrop\" type=\"button\"  onClick = {toggleOpen.bind(this, 0)} className=\"btn btn-primary dropdown-toggle\"\n                                data-toggle=\"dropdown-menu\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                                Shortest Path Algorithms\n                            </button>\n                            <div className={menuClass1} aria-labelledby=\"btnGroupDrop1\">\n                                <a id={\"menuButton\"} className = \"btn btn-primary-controlButton\" onClick = { backendDepthFirstSearch.bind(this) }>\n                                    Depth First Search\n                                    <p> (Does path Exist)</p>\n                                </a>\n                                <a id={\"menuButton\"} className = \"btn btn-primary-controlButton\" onClick = { backendBreathFirstSearch.bind(this) }>\n                                    Breath-First Search\n                                    <p>(Shortest Path)</p>\n                                </a>\n                                <a id={\"menuButton\"} className = \"btn btn-primary-controlButton\" onClick = { backendDijkstra.bind(this) }>\n                                    Dijkstra's SPF\n                                </a>\n                                <a id={\"menuButton\"} className = \"btn btn-primary-controlButton1\" onClick = { generatePrimsTree.bind(this) }>\n                                    Prim's Minimum Spanning Tree\n                                    <p>(Not yet implemented)</p>\n                                </a>\n                            </div>\n                        </div>\n                        <div className=\"btn-group\" role=\"group\">\n                            <button id=\"btnGroupDrop\" type=\"button\"  onClick = {toggleOpen.bind(this, 1)} className=\"btn btn-primary dropdown-toggle\"\n                                    data-toggle=\"dropdown-menu\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                                Maze Generation Algorithms\n                            </button>\n                            <div className={menuClass2} aria-labelledby=\"btnGroupDrop11\">\n                                <a id={\"menuButton\"} className = \"btn btn-primary-controlButton1\" onClick = { generatePrimsMaze.bind(this) }>\n                                    Prim's Maze\n                                </a>\n                                <a id={\"menuButton\"} className = \"btn btn-primary-controlButton1\" onClick = { generateBacktrack.bind(this) }>\n                                    Recursive Backtracking\n                                </a>\n\n                            </div>\n                        </div>\n                    <Button className = \"btn btn-lg btn-primary-controlButton\" onClick = {clearGraph.bind(this)}>Clear Graph</Button>\n                    <Button className = \"btn btn-lg btn-primary-controlButton\"  id = \"barrier\" onClick = { createBarrier.bind(this)}>Draw Barrier</Button>\n                    <Button className = \"btn btn-lg btn-primary-controlButton\" id =\"addWeights\" onClick = { setWeightButtonFunction.bind(this) }>Set Weights</Button>\n                        <Button className = \"btn btn-lg btn-primary-controlButton\" id =\"randomizeWeights\" onClick = { randomizeWeights.bind(this)}>Randomize Weights</Button>\n                    <Button className = \"btn btn-lg btn-primary-controlButton\" id = \"randomizeWeights\" onClick = { clearWeights.bind(this)}>Remove Weights</Button>\n                    </div>\n            </div>\n            <div id={\"centerBox\"}>\n                {parent}\n                <div id={\"rightBox\"}>\n                    <MyCard loading = {loading} clearMessages = {clearCardMessages.bind(this)} messages = {cardMessages} header = {backendOrFrontEnd} />\n\n                </div>\n            </div>\n\n\n        </div>\n    );\n}\n\nexport default Board\n\n\n/*\n\n */","import axios from \"axios\";\n/*\ncreates a function that returns a function that is responsible for messaging the backend,\nanimating the return values\nor\nresponding that there are no return values to animate\n */\n\n\nexport const queryBackendHigherOrderFunctionMaze =  (testingUrl, SIZE, WIDTH, HEIGHT, backendResponse, addToast, setBlockedNodes, setSquares) =>\n\n    async (urlSuffix, startMarkerIndex, endMarkerIndex, squares, blockedNodes, weights) =>\n    {\n\n    await axios.post(testingUrl + urlSuffix, {startMarkerIndex, endMarkerIndex, SIZE, WIDTH, HEIGHT, squares, blockedNodes, weights })\n    .then(res=>{\n        const date1 = new Date()\n        backendResponse(date1, res.data[0])\n        let arr = res.data[1]\n        let tempBlockedNodes = Array(SIZE).fill(false)\n        for(let i = 0; i < arr.length; i++)\n        {\n            if(arr[i] === 'black')\n                tempBlockedNodes[i] = true\n        }\n        setBlockedNodes(tempBlockedNodes)\n        setSquares(res.data[1])\n    })\n    .catch(err => {console.error(err)})\n    }\n\n\n\n\n\nexport const queryBackendHigherOrderFunctionSPF =  (testingUrl, SIZE, WIDTH, backendResponse, addToast) =>\n\n    async  (urlSuffix, startMarkerIndex, endMarkerIndex, blockedNodes, weights, animate) => {\n\n            await axios.post(testingUrl  + urlSuffix, {startMarkerIndex, endMarkerIndex, SIZE, WIDTH, blockedNodes, weights\n            })\n                .then(res => {\n                    const date1 = new Date()\n                    backendResponse(date1, res.data[0])\n                    if (res.data[1] !== null ) {\n                        animate(res.data[1])\n                    } else\n                        return (\n                            addToast(\"Path does not exist\", {\n                                appearance: 'warning',\n                                autoDismiss: true,\n                            }))\n                })\n                .catch(err => {\n                    console.error(err)\n                })\n        }\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport Board from './Board.js'\nimport {ToastProvider} from \"react-toast-notifications\";\n\nclass Game extends React.Component {\n    constructor(props)\n    {\n        super(props)\n        this.state =({\n            //must be square\n            heightAndWidth : 40,\n        })\n    }\n    render() {\n        return (\n\n            <div id =\"body\" className=\"game\">\n\n                <div className=\"game-board\">\n                    <ToastProvider id = {\"toasty\"} autoDismissTimeout={2000} placement=\"bottom-center\">\n                        <Board id={\"board\"} heightAndWidth = {this.state.heightAndWidth}/>\n                    </ToastProvider>\n                </div>\n            </div>\n\n        );\n    }\n}\n\nReactDOM.render(\n    <Game />,\n\n\n    document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}