{"version":3,"sources":["CustomCard.js","Square.js","Board.js","index.js"],"names":["MyCard","props","loader","holder","i","messages","length","push","Card","Title","key","header","Text","loading","className","Header","Button","id","onClick","clearMessages","bind","Body","Square","state","hover","weight","onMouseEnterSquare","onMouseLeaveSquare","this","setState","nextProps","nextState","nextContext","stateId","variant","onMouseEnter","onMouseLeave","React","Component","Board","testingUrl","useState","cardMessages","setCardMessages","setLoading","backendOrFrontEnd","setBackEndOrFrontEnd","Array","height","width","fill","blockedNodes","setBlockedNodes","squares","setSquares","weights","setWeights","startMarkerIndex","setStartMarkerIndex","dropDownMenu","setDropDownMenu","endMarkerIndex","setEndMarkerIndex","barrier","setBarrier","addToast","useToasts","weightButton","setWeightButton","updateMessages","data","sender","unshift","slice","dialogToOutput","date1","date2","Date","time","Math","abs","backendDijkstra","a","valid","checkForValidMarkers","messageSeparator","axios","post","SIZE","WIDTH","then","res","appearance","autoDismiss","animateWithReturnPath","catch","err","console","error","backendDepthFirstSearch","animateWithoutReturnPath","backendBreathFirstSearch","HEIGHT","arr","timerID2","tickIndex","resetRun","tick2","tickArr","clearInterval","setInterval","findPathArr","shortestPathArr","finishedAnimatingFindPath","renderSquare","count","index","fork","setWeight","SetMarker","toastMessage","startStateMarker","endStateMarker","clearWeights","createBarrier","setWeightButtonFunction","document","getElementById","innerText","randomizeWeights","generateMaze","tempBlockedNodes","parent","children","j","menuClass","role","type","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","clearSquares","Game","autoDismissTimeout","placement","ReactDOM","render"],"mappings":"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","file":"static/js/main.e00db152.chunk.js","sourcesContent":["import Card from \"react-bootstrap/Card\";\nimport Button from \"react-bootstrap/Button\";\nimport React from \"react\";\nimport RingLoader from \"react-spinners/RingLoader\"\n\nconst MyCard = (props) =>\n{\n    const holder = [];\n    for(let i = 0; i < props.messages.length; i++)\n    {//values will not be sorted or changed in any way such that using the index for the key should be fine\n        holder.push( <Card.Title key = {\"Title\" + i} >{props.header[i]}</Card.Title>)\n        holder.push(  <Card.Text key = {\"Message\" + i}>{props.messages[i]}</Card.Text>)\n    }\n    let loader\n    if(props.loading)\n    {\n        loader =  <div className = \"sweet-loading\">\n            <RingLoader\n            />\n        </div>\n    }\n    return (\n    <Card className=\"text-center\">\n        <Card.Header>\n            <Button id={\"headerButton\"} onClick = {props.clearMessages.bind(this)}>Clear Messages</Button>\n            Messages Sent and Received\n\n        </Card.Header>\n        <Card.Body>\n            {loader}\n            {holder}\n        </Card.Body>\n    </Card>)\n}\nexport default MyCard","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nclass Square extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            hover: false,\n            id: '',\n            weight: 0\n        }\n        this.onMouseEnterSquare = this.onMouseEnterSquare.bind(this)\n        this.onMouseLeaveSquare = this.onMouseLeaveSquare.bind(this)\n        this.onClick = this.onClick.bind(this)\n    }\n\n    onMouseEnterSquare() {\n        this.setState({\n            id: 'redBackground',\n            hover: true\n        })\n    }\n\n    onMouseLeaveSquare() {\n        this.setState({\n            id: 'blueBackground',\n            hover: false\n        })\n    }\n    onClick() {\n        this.props.onClick()\n        //this.setWeight()\n\n    }\n    shouldComponentUpdate(nextProps, nextState, nextContext)\n    {\n        if(nextState.id !== this.state.id || this.props.weight !== nextProps.weight || this.props.id !== nextProps.id)\n            return true\n        return false;\n    }\n    render() {\n        let stateId\n        if(!this.state.hover)\n            stateId = this.props.id\n        else\n            stateId = this.state.id\n        return (\n            <Button\n                variant=\"secondary\"\n                //className = \"btn btn-sm btn-primary-controlButton\"\n               className=\"square\"\n                id={stateId}\n                onMouseEnter={this.onMouseEnterSquare.bind()}\n                onMouseLeave={this.onMouseLeaveSquare.bind()}\n                onClick={this.onClick.bind()}>\n                {this.props.weight}\n            </Button>\n        )\n    }\n}\n\nexport default Square\n\n","import React, {useState} from \"react\";\nimport MyCard from \"./CustomCard\"\nimport {useToasts} from \"react-toast-notifications\";\nimport Button from \"react-bootstrap/Button\";\nimport Square from \"./Square\"\nimport axios from \"axios\"\n\n\nconst Board = (props) => {\n    const testingUrl = \"https://visualizerbackend.herokuapp.com/\"\n    //const testingUrl = \"http://localhost:9000/\"\n    //can likely optimize blockedNodes\n    let [cardMessages, setCardMessages] = useState([\"Note: If the server has been idle, the initial query may take up to 10 seconds to complete.\",\n                                                            \"Backend is hosted at: https://visualizerbackend.herokuapp.com/\",\n                                                            \"To use:  Click a square to set a start location\",\n                                                                \"Then click another square to select a destination\",\n                                                                    \"You may also set barriers to change the available paths\",\n                                                                        \"For Dijkstra's SPF you can set the weight of each square \" +\n                                                                        \"changing the algorithm's chosen path\",\n                                                                        \"As a note: The path found may not be the 'straightest' path as diagonal moves are valid,\" +\n                                                                        \"but if you count the squares it will be equal to a more intuitive path\"])\n    const [loading, setLoading] = useState(false)\n    let [backendOrFrontEnd, setBackEndOrFrontEnd] = useState([])\n    const [blockedNodes, setBlockedNodes] = useState(Array(props.height * props.width).fill(false))\n    let [squares, setSquares] = useState(Array(props.height * props.width).fill(false))\n    let [weights, setWeights] = useState(Array(props.height * props.width).fill(1))\n    const [startMarkerIndex, setStartMarkerIndex] = useState(-1)\n    const [dropDownMenu, setDropDownMenu] = useState(false)\n    const [endMarkerIndex, setEndMarkerIndex] = useState(-1)\n    const [barrier, setBarrier] = useState(false)\n    const {addToast} = useToasts()\n    const [weightButton, setWeightButton] = useState(false)\n\n    const updateMessages = (data, sender) =>\n    {\n        cardMessages.unshift(data)\n        backendOrFrontEnd.unshift(sender)\n        setCardMessages(cardMessages.slice())\n        setBackEndOrFrontEnd(backendOrFrontEnd.slice())\n\n    }\n    const dialogToOutput = (date1, data) =>\n    {\n        setLoading(false)\n        const date2 = new Date()\n        const time = Math.abs(date2-date1)\n        updateMessages(data, 'Backend'  )\n        updateMessages('Query round trip time: ' +  time + \" milliseconds\", 'Frontend')\n    }\n    let backendDijkstra = async () =>\n    {\n        const date1 = new Date()\n        const valid = checkForValidMarkers()\n        if(valid !== null)\n        {\n            return valid\n        }\n        setLoading(true)\n        messageSeparator()\n        updateMessages('Sending data for Dijkstra', 'Frontend')\n        await axios.post(testingUrl + 'dijkstra', {startMarkerIndex, endMarkerIndex, SIZE, WIDTH, blockedNodes, weights })\n            .then(res=>{\n                dialogToOutput(date1, res.data[0])\n                if(!res.data[1] === false) {\n                    animateWithReturnPath(res.data[1])\n                }\n                else\n                    return (\n                        addToast(\"Path does not exist\", {\n                            appearance: 'warning',\n                            autoDismiss: true,\n                        }))\n            })\n            .catch(err => {console.error(err)})\n    }\n    const backendDepthFirstSearch = async () =>\n    {\n        const date1 = new Date()\n        const valid =checkForValidMarkers()\n        if(valid!== null) {\n            return valid\n        }\n        setLoading(true)\n        messageSeparator()\n        updateMessages('Sending data for DFS', 'Frontend')\n        await axios.post(testingUrl + 'depthFirstSearch', {startMarkerIndex, endMarkerIndex, SIZE, WIDTH, blockedNodes})\n            .then(res=>{\n                dialogToOutput(date1, res.data[0])\n                animateWithoutReturnPath(res.data[1])\n            })\n            .catch(err => {console.error(err)})\n    }\n    const messageSeparator = () =>\n    {\n        updateMessages(\" \", \" *************************  \")\n    }\n    let backendBreathFirstSearch = async () => {\n        let date1 = new Date()\n        const valid =checkForValidMarkers()\n        if(valid!== null)\n        {\n            return valid\n        }\n        setLoading(true)\n        messageSeparator()\n        updateMessages('Sending data for BFS', 'Frontend')\n        await axios.post(testingUrl + 'breathFirstSearch', {startMarkerIndex, endMarkerIndex, SIZE, WIDTH, HEIGHT, squares, blockedNodes, weights })\n            .then(res=>{\n                dialogToOutput(date1, res.data[0])\n                if(!res.data[1] === false) {\n                    animateWithReturnPath(res.data[1])\n                }\n                else\n                    return (\n                        addToast(\"Path does not exist\", {\n                            appearance: 'warning',\n                            autoDismiss: true,\n                        }))\n            })\n            .catch(err => {console.error(err)})\n    }\n\n    let animateWithoutReturnPath = (arr) => {\n\n        let tickIndex = 1\n        let timerID2\n        resetRun()\n        //reDrawBarrier()\n        const clearTickInterval = () => {\n            clearInterval(timerID2)\n        }\n\n        const tick2 = (tickArr) => {\n            if (tickIndex < tickArr.length - 1) {\n                //mutating the array directly :/\n                squares[tickArr[tickIndex]] = 'green'\n                tickIndex++\n                setSquares(squares.slice())\n            } else {\n                clearTickInterval(timerID2)\n                if(tickArr[tickArr.length - 1] === false) {\n                    setSquares(squares.slice())\n                    return (\n                        addToast(\"Path does not exist\", {\n                            appearance: 'warning',\n                            autoDismiss: true,\n                        }))\n                }\n                squares[tickArr[tickArr.length - 1]] = 'gold'\n                setSquares(squares.slice())\n                return (\n                    addToast(\"Path does exist\", {\n                        appearance: 'success',\n                        autoDismiss: true,\n                    }))\n            }\n        }\n        timerID2 = setInterval(\n            () => tick2(arr),\n            10\n        )\n    }\n    let animateWithReturnPath = (arr) => {\n        const findPathArr = arr[0]\n        const shortestPathArr = arr[1]\n        let tickIndex = 0\n        let timerID2\n        resetRun()\n        const clearTickInterval = () => {\n            clearInterval(timerID2)\n        }\n        let finishedAnimatingFindPath = false\n        const tick2 = (findPathArr, shortestPathArr) =>\n        {\n            if(!finishedAnimatingFindPath)\n            {\n                if (tickIndex <= findPathArr.length)\n                {\n                    //mutating the array directly -- doesn't seem to update promptly otherwise\n                    if (findPathArr[tickIndex] !== endMarkerIndex && findPathArr[tickIndex] !== startMarkerIndex)\n                    {\n                        squares[findPathArr[tickIndex]] = 'green'\n                    }\n                    tickIndex++\n                }\n                else\n                {\n                    finishedAnimatingFindPath = true\n                    squares[endMarkerIndex] = 'gold'\n                    tickIndex = 0\n                }\n                setSquares(squares.slice())\n            }\n            else\n            {\n                if(tickIndex < shortestPathArr.length - 1)\n                {\n                    squares[shortestPathArr[tickIndex]] = 'gold'\n                    setSquares(squares.slice())\n                    tickIndex++\n                }\n                else{\n                    squares[shortestPathArr[shortestPathArr.length - 1]] = 'gold'\n                    setSquares(squares.slice())\n                    clearTickInterval(timerID2)\n                }\n            }\n        }\n        timerID2 = setInterval(\n            () => tick2(findPathArr, shortestPathArr),\n            0\n        )\n    }\n\n    const setWeight = (count) => {\n        weights[count] = weights[count]+1\n        setWeights(weights.slice())\n    }\n\n    const checkForValidMarkers = () => {\n        if (startMarkerIndex < 0 || endMarkerIndex < 0) {\n            return (\n                addToast(\"Please select a starting and ending location first\", {\n                    appearance: 'warning',\n                    autoDismiss: true,\n                }))\n        } else return null\n    }\n\n    let renderSquare = (count) => {\n        let state = 'slateGrey'\n        //if (squares[count] === 'gold' || squares[count] === 'green' || squares[count] === 'black')\n            state = squares[count]\n        //else if (count === startMarkerIndex)\n           // state = 'startMarker'\n        //else if (count === endMarkerIndex)\n          //  state = 'endMarker'\n        return (<Square id={state} index={count} weight = {weights[count]} onClick={fork.bind(this, count)} key={count}/>)\n    }\n    let fork = (i) => {\n        if(weightButton)\n            setWeight(i)\n        else\n            SetMarker(i)\n    }\n    let SetMarker = (i) => {\n        let toastMessage = \"\"\n        let startStateMarker = startMarkerIndex;\n        let endStateMarker = endMarkerIndex;\n        if (barrier) {\n            blockedNodes[i] = true\n            setBlockedNodes(blockedNodes.slice())\n            squares[i] = 'black'\n            setSquares(squares.slice())\n            return\n        } else if (startStateMarker === i) {\n            squares[i] = 'grey'\n            startStateMarker = -1\n            //arr[i] = undefined\n            toastMessage = \"Deselected Start Location\"\n        } else if (startStateMarker < 0 && endStateMarker === i) {\n            endStateMarker = -1\n            //squares[i] = 'grey'\n            toastMessage = \"Deselected End Location\"\n        } else if (startStateMarker < 0) {\n            startStateMarker = i\n            squares[i] = 'startMarker'\n            //arr[i] = 'O'\n            toastMessage = \"Start Location Selected\"\n        } else if (endStateMarker === i) {\n            //squares[i] = 'grey'\n            endStateMarker = -1\n            //arr[i] = undefined\n            toastMessage = \"Deselected End Location\"\n        } else if (endStateMarker < 0) {\n            endStateMarker = i\n            squares[i] = 'endMarker'\n            //arr[i] = 'X'\n            toastMessage = \"Selected End Location\"\n        } else {\n            return\n        }\n        setStartMarkerIndex(startStateMarker)\n        setEndMarkerIndex(endStateMarker)\n        setSquares(squares)\n        return (\n            addToast(toastMessage, {\n                appearance: 'info',\n                autoDismiss: true,\n            }))\n    }\n\n    const clearSquares = () => {\n        //squares not changing without setting squares explicitly\n        for(let i = 0; i < squares.length; i++) {\n            squares = Array(props.height * props.width).fill(null)\n            setSquares(Array(props.height * props.width).fill(null))\n        }\n    }\n    const resetRun = () =>{\n        for(let i = 0; i < squares.length; i++) {\n            if (squares[i] === 'green' || squares[i] === 'gold') {\n                squares[i] = 'grey'\n            }\n        }\n        setSquares(squares.slice())\n    }\n    const reDrawBarrier = () =>{\n        for(let i = 0; i < squares.length; i++)\n        {\n            if(blockedNodes[i] === true)\n            {\n                squares[i] = 'black'\n            }\n        }\n        setSquares(Array(squares.slice()))\n    }\n    const clearBarrier = () => {\n        setBlockedNodes(Array(props.height * props.width).fill(false))\n    }\n    const clearMarkers = () => {\n        setStartMarkerIndex(-1)\n        setEndMarkerIndex(-1)\n    }\n    const clearWeights = () => {\n        setWeights(Array(props.height * props.width).fill(1))\n    }\n    const clearGraph = () => {\n        clearSquares()\n        clearBarrier()\n        clearMarkers()\n        clearWeights()\n    }\n    const createBarrier = () => {\n        setBarrier(!barrier)\n        if(weightButton)\n        {\n            setWeightButtonFunction()\n        }\n        if (barrier)\n            document.getElementById(\"barrier\").innerText = \"Draw Barrier\"\n        else\n            document.getElementById(\"barrier\").innerText = \"Disable Barrier\"\n    }\n\n    const setWeightButtonFunction = () =>\n    {\n        setWeightButton(!weightButton)\n        if(barrier)\n        {\n            createBarrier()\n        }\n        if(weightButton)\n            document.getElementById(\"addWeights\").innerText = \"Set Weights\"\n        else\n            document.getElementById(\"addWeights\").innerText = \"Toggle Weights Off\"\n\n    }\n    const randomizeWeights = async () =>\n    {\n        let date1 = new Date()\n        setLoading(true)\n        messageSeparator()\n        updateMessages('Sending data for random weight generation', 'Frontend')\n        await axios.post(testingUrl + 'weightGeneration', {SIZE})\n            .then(res => {\n                setLoading(false)\n                dialogToOutput(date1, res.data[0])\n                setWeights(res.data[1])\n            })\n    }\n    const generateMaze = async () =>\n    {\n        let date1 = new Date()\n        setLoading(true)\n        messageSeparator()\n        updateMessages('Sending data for maze generation', 'Frontend')\n        await axios.post(testingUrl + 'generateMaze', {startMarkerIndex, endMarkerIndex, SIZE, WIDTH, HEIGHT, squares, blockedNodes, weights })\n            .then(res=>{\n                setLoading(false)\n                dialogToOutput(date1, res.data[0])\n                let arr = res.data[1]\n                let tempBlockedNodes = Array(props.height * props.width).fill(false)\n                for(let i = 0; i < arr.length; i++)\n                {\n                    if(arr[i] === 'black')\n                        tempBlockedNodes[i] = true\n                }\n                setBlockedNodes(tempBlockedNodes)\n                setSquares(res.data[1])\n            })\n            .catch(err => {console.error(err)})\n    }\n    const clearCardMessages = () =>\n    {\n        setCardMessages([])\n        setBackEndOrFrontEnd([])\n    }\n\n    let parent = []\n    let count = 0\n    const HEIGHT = props.height\n    const WIDTH = props.width\n    const SIZE = HEIGHT * WIDTH\n    for (let i = 0; i < HEIGHT; i++) {\n        let children = []\n        for (let j = 0; j < WIDTH; j++) {\n            children.push(renderSquare(count))\n            count++\n        }\n        parent.push(<div key={i} className={\"board-row\"}>{children}</div>)\n    }\n    const toggleOpen = () => setDropDownMenu(!dropDownMenu)\n    const menuClass = `dropdown-menu ${ dropDownMenu? \" show\": \"\"}`\n\n    return (\n        <div id={\"box\"}>\n            <div id={\"leftBox\"}>\n                    <div id = \"buttons1\" className = \"btn-group-vertical\" role={\"group\"}>\n                        <div className=\"btn-group\" role=\"group\">\n                        <button id=\"btnGroupDrop1\" type=\"button\"  onClick = {toggleOpen.bind(this)} className=\"btn btn-primary dropdown-toggle\"\n                                data-toggle=\"dropdown-menu\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                            Algorithms\n                        </button>\n                        <div className={menuClass} aria-labelledby=\"btnGroupDrop1\">\n                            <a id={\"menuButton\"} className = \"btn btn-primary-controlButton\" onClick = { backendDepthFirstSearch.bind(this) }>Backend DFS>\n                                Depth First Search\n                                <p> (Does path Exist)</p>\n                          </a>\n                            <a id={\"menuButton\"} className = \"btn btn-primary-controlButton\" onClick = { backendBreathFirstSearch.bind(this) }>\n                                Breath-First Search\n                                <p>(Shortest Path)</p>\n                            </a>\n                            <a id={\"menuButton\"} className = \"btn btn-primary-controlButton\" onClick = { backendDijkstra.bind(this) }>\n                                Dijkstra's SPF\n                            </a>\n                        </div>\n                    </div>\n                    <Button className = \"btn btn-lg btn-primary-controlButton\" onClick = {clearGraph.bind(this)}>Clear Graph</Button>\n                    <Button className = \"btn btn-lg btn-primary-controlButton\"  id = \"barrier\" onClick = { createBarrier.bind(this)}>Draw Barrier</Button>\n                    <Button className = \"btn btn-lg btn-primary-controlButton\" id =\"addWeights\" onClick = { setWeightButtonFunction.bind(this) }>Set Weights</Button>\n                    <Button className = \"btn btn-lg btn-primary-controlButton\" id = \"maze\" onClick = { generateMaze.bind(this)}>Generate Maze</Button>\n                    <Button className = \"btn btn-lg btn-primary-controlButton\" id =\"randomizeWeights\" onClick = { randomizeWeights.bind(this)}>Randomize Weights</Button>\n                    <Button className = \"btn btn-lg btn-primary-controlButton\" id = \"randomizeWeights\" onClick = { clearWeights.bind(this)}>Remove Weights</Button>\n                    </div>\n\n            </div>\n\n            <div id={\"centerBox\"}>\n                {parent}\n                <div id={\"rightBox\"}>\n                    <MyCard loading = {loading} clearMessages = {clearCardMessages.bind(this)} messages = {cardMessages} header = {backendOrFrontEnd} />\n                </div>\n            </div>\n\n        </div>\n    );\n}\n\nexport default Board\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport Board from './Board.js'\nimport {ToastProvider} from \"react-toast-notifications\";\n\nclass Game extends React.Component {\n    constructor(props)\n    {\n        super(props)\n        this.state =({\n            height : 40,\n            width : 40,\n        })\n    }\n    render() {\n        return (\n\n            <div id =\"body\" className=\"game\">\n\n                <div className=\"game-board\">\n                    <ToastProvider autoDismissTimeout={2000} placement=\"bottom-center\">\n                        <Board height = {this.state.height} width = {this.state.width}/>\n                    </ToastProvider>\n                </div>\n\n                <div className=\"game-info\">\n                </div>\n            </div>\n\n        );\n    }\n}\n\nReactDOM.render(\n    <Game />,\n\n\n    document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}